//go:build go1.6
// +build go1.6

// Code generated by codecgen - DO NOT EDIT.

package structures

import (
	"errors"
	"runtime"
	"sort"
	"strconv"
	"time"

	codec1978 "github.com/ugorji/go/codec"
	pkg1_primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

const (
	// ----- content types ----
	codecSelferCcUTF842 = 1
	codecSelferCcRAW42  = 255
	// ----- value types used ----
	codecSelferValueTypeArray42     = 10
	codecSelferValueTypeMap42       = 9
	codecSelferValueTypeString42    = 6
	codecSelferValueTypeInt42       = 2
	codecSelferValueTypeUint42      = 3
	codecSelferValueTypeFloat42     = 4
	codecSelferValueTypeNil42       = 1
	codecSelferBitsize42            = uint8(32 << (^uint(0) >> 63))
	codecSelferDecContainerLenNil42 = -2147483648
)

var (
	errCodecSelferOnlyMapOrArrayEncodeToStruct42                = errors.New(`only encoded map or array can be decoded into a struct`)
	_                                            sort.Interface = nil
)

type codecSelfer42 struct{}

func codecSelfer42False() bool { return false }
func codecSelfer42True() bool  { return true }

type codecSelfer42stringSlice []string

func (p codecSelfer42stringSlice) Len() int           { return len(p) }
func (p codecSelfer42stringSlice) Swap(i, j int)      { p[uint(i)], p[uint(j)] = p[uint(j)], p[uint(i)] }
func (p codecSelfer42stringSlice) Less(i, j int) bool { return p[uint(i)] < p[uint(j)] }

type codecSelfer42uint64Slice []uint64

func (p codecSelfer42uint64Slice) Len() int           { return len(p) }
func (p codecSelfer42uint64Slice) Swap(i, j int)      { p[uint(i)], p[uint(j)] = p[uint(j)], p[uint(i)] }
func (p codecSelfer42uint64Slice) Less(i, j int) bool { return p[uint(i)] < p[uint(j)] }

type codecSelfer42int64Slice []int64

func (p codecSelfer42int64Slice) Len() int           { return len(p) }
func (p codecSelfer42int64Slice) Swap(i, j int)      { p[uint(i)], p[uint(j)] = p[uint(j)], p[uint(i)] }
func (p codecSelfer42int64Slice) Less(i, j int) bool { return p[uint(i)] < p[uint(j)] }

type codecSelfer42float64Slice []float64

func (p codecSelfer42float64Slice) Len() int           { return len(p) }
func (p codecSelfer42float64Slice) Swap(i, j int)      { p[uint(i)], p[uint(j)] = p[uint(j)], p[uint(i)] }
func (p codecSelfer42float64Slice) Less(i, j int) bool { return p[uint(i)] < p[uint(j)] }

func init() {
	if codec1978.GenVersion != 25 {
		_, file, _, _ := runtime.Caller(0)
		ver := strconv.FormatInt(int64(codec1978.GenVersion), 10)
		panic(errors.New("codecgen version mismatch: current: 25, need " + ver + ". Re-generate file: " + file))
	}
	if false { // reference the types, but skip this branch at build/run time
		var _ pkg1_primitive.ObjectID
		var _ time.Time
	}
}

func (User) codecSelferViaCodecgen() {}
func (x *User) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer42
	z, r := codec1978.GenHelper().Encoder(e)
	_, _, _ = h, z, r
	if z.EncBasicHandle().CheckCircularRef {
		z.EncEncode(x)
		return
	}
	if x == nil {
		r.EncodeNil()
	} else {
		yy2arr2 := z.EncBasicHandle().StructToArray
		_ = yy2arr2
		const yyr2 bool = false // struct tag has 'toArray'
		if yyr2 || yy2arr2 {
			z.EncWriteArrayStart(8)
			z.EncWriteArrayElem()
			if z.EncBasicHandle().TimeBuiltin() {
				r.EncodeTime(x.CreatedAt)
			} else if yyxt11 := z.Extension(x.CreatedAt); yyxt11 != nil {
				z.EncExtension(x.CreatedAt, yyxt11)
			} else if z.EncBinary() {
				z.EncBinaryMarshal(x.CreatedAt)
			} else if !z.EncBinary() && z.IsJSONHandle() {
				z.EncJSONMarshal(x.CreatedAt)
			} else {
				z.EncFallback(x.CreatedAt)
			}
			z.EncWriteArrayElem()
			if z.EncBasicHandle().TimeBuiltin() {
				r.EncodeTime(x.UpdatedAt)
			} else if yyxt12 := z.Extension(x.UpdatedAt); yyxt12 != nil {
				z.EncExtension(x.UpdatedAt, yyxt12)
			} else if z.EncBinary() {
				z.EncBinaryMarshal(x.UpdatedAt)
			} else if !z.EncBinary() && z.IsJSONHandle() {
				z.EncJSONMarshal(x.UpdatedAt)
			} else {
				z.EncFallback(x.UpdatedAt)
			}
			z.EncWriteArrayElem()
			yy13 := &x.ID
			if yyxt14 := z.Extension(yy13); yyxt14 != nil {
				z.EncExtension(yy13, yyxt14)
			} else if !z.EncBinary() && z.IsJSONHandle() {
				z.EncJSONMarshal(*yy13)
			} else {
				z.F.EncSliceUint8V(([]uint8)(yy13[:]), e)
			}
			z.EncWriteArrayElem()
			yy15 := &x.Address
			h.encArray20uint8((*[20]uint8)(yy15), e)
			z.EncWriteArrayElem()
			r.EncodeString(string(x.Email))
			z.EncWriteArrayElem()
			r.EncodeBool(bool(x.EmailVerified))
			z.EncWriteArrayElem()
			yy19 := &x.EmailVerificationToken
			h.encArray32uint8((*[32]uint8)(yy19), e)
			z.EncWriteArrayElem()
			if z.EncBasicHandle().TimeBuiltin() {
				r.EncodeTime(x.EmailVerificationLast)
			} else if yyxt21 := z.Extension(x.EmailVerificationLast); yyxt21 != nil {
				z.EncExtension(x.EmailVerificationLast, yyxt21)
			} else if z.EncBinary() {
				z.EncBinaryMarshal(x.EmailVerificationLast)
			} else if !z.EncBinary() && z.IsJSONHandle() {
				z.EncJSONMarshal(x.EmailVerificationLast)
			} else {
				z.EncFallback(x.EmailVerificationLast)
			}
			z.EncWriteArrayEnd()
		} else {
			z.EncWriteMapStart(8)
			if z.EncBasicHandle().Canonical {
				z.EncWriteMapElemKey()
				r.EncodeString(`addr`)
				z.EncWriteMapElemValue()
				yy22 := &x.Address
				h.encArray20uint8((*[20]uint8)(yy22), e)
				z.EncWriteMapElemKey()
				r.EncodeString(`created_at`)
				z.EncWriteMapElemValue()
				if z.EncBasicHandle().TimeBuiltin() {
					r.EncodeTime(x.CreatedAt)
				} else if yyxt24 := z.Extension(x.CreatedAt); yyxt24 != nil {
					z.EncExtension(x.CreatedAt, yyxt24)
				} else if z.EncBinary() {
					z.EncBinaryMarshal(x.CreatedAt)
				} else if !z.EncBinary() && z.IsJSONHandle() {
					z.EncJSONMarshal(x.CreatedAt)
				} else {
					z.EncFallback(x.CreatedAt)
				}
				z.EncWriteMapElemKey()
				r.EncodeString(`email`)
				z.EncWriteMapElemValue()
				r.EncodeString(string(x.Email))
				z.EncWriteMapElemKey()
				r.EncodeString(`email_verification_last`)
				z.EncWriteMapElemValue()
				if z.EncBasicHandle().TimeBuiltin() {
					r.EncodeTime(x.EmailVerificationLast)
				} else if yyxt26 := z.Extension(x.EmailVerificationLast); yyxt26 != nil {
					z.EncExtension(x.EmailVerificationLast, yyxt26)
				} else if z.EncBinary() {
					z.EncBinaryMarshal(x.EmailVerificationLast)
				} else if !z.EncBinary() && z.IsJSONHandle() {
					z.EncJSONMarshal(x.EmailVerificationLast)
				} else {
					z.EncFallback(x.EmailVerificationLast)
				}
				z.EncWriteMapElemKey()
				r.EncodeString(`email_verification_token`)
				z.EncWriteMapElemValue()
				yy27 := &x.EmailVerificationToken
				h.encArray32uint8((*[32]uint8)(yy27), e)
				z.EncWriteMapElemKey()
				r.EncodeString(`email_verified`)
				z.EncWriteMapElemValue()
				r.EncodeBool(bool(x.EmailVerified))
				z.EncWriteMapElemKey()
				r.EncodeString(`id`)
				z.EncWriteMapElemValue()
				yy30 := &x.ID
				if yyxt31 := z.Extension(yy30); yyxt31 != nil {
					z.EncExtension(yy30, yyxt31)
				} else if !z.EncBinary() && z.IsJSONHandle() {
					z.EncJSONMarshal(*yy30)
				} else {
					z.F.EncSliceUint8V(([]uint8)(yy30[:]), e)
				}
				z.EncWriteMapElemKey()
				r.EncodeString(`updated_at`)
				z.EncWriteMapElemValue()
				if z.EncBasicHandle().TimeBuiltin() {
					r.EncodeTime(x.UpdatedAt)
				} else if yyxt32 := z.Extension(x.UpdatedAt); yyxt32 != nil {
					z.EncExtension(x.UpdatedAt, yyxt32)
				} else if z.EncBinary() {
					z.EncBinaryMarshal(x.UpdatedAt)
				} else if !z.EncBinary() && z.IsJSONHandle() {
					z.EncJSONMarshal(x.UpdatedAt)
				} else {
					z.EncFallback(x.UpdatedAt)
				}
			} else {
				z.EncWriteMapElemKey()
				r.EncodeString(`created_at`)
				z.EncWriteMapElemValue()
				if z.EncBasicHandle().TimeBuiltin() {
					r.EncodeTime(x.CreatedAt)
				} else if yyxt33 := z.Extension(x.CreatedAt); yyxt33 != nil {
					z.EncExtension(x.CreatedAt, yyxt33)
				} else if z.EncBinary() {
					z.EncBinaryMarshal(x.CreatedAt)
				} else if !z.EncBinary() && z.IsJSONHandle() {
					z.EncJSONMarshal(x.CreatedAt)
				} else {
					z.EncFallback(x.CreatedAt)
				}
				z.EncWriteMapElemKey()
				r.EncodeString(`updated_at`)
				z.EncWriteMapElemValue()
				if z.EncBasicHandle().TimeBuiltin() {
					r.EncodeTime(x.UpdatedAt)
				} else if yyxt34 := z.Extension(x.UpdatedAt); yyxt34 != nil {
					z.EncExtension(x.UpdatedAt, yyxt34)
				} else if z.EncBinary() {
					z.EncBinaryMarshal(x.UpdatedAt)
				} else if !z.EncBinary() && z.IsJSONHandle() {
					z.EncJSONMarshal(x.UpdatedAt)
				} else {
					z.EncFallback(x.UpdatedAt)
				}
				z.EncWriteMapElemKey()
				r.EncodeString(`id`)
				z.EncWriteMapElemValue()
				yy35 := &x.ID
				if yyxt36 := z.Extension(yy35); yyxt36 != nil {
					z.EncExtension(yy35, yyxt36)
				} else if !z.EncBinary() && z.IsJSONHandle() {
					z.EncJSONMarshal(*yy35)
				} else {
					z.F.EncSliceUint8V(([]uint8)(yy35[:]), e)
				}
				z.EncWriteMapElemKey()
				r.EncodeString(`addr`)
				z.EncWriteMapElemValue()
				yy37 := &x.Address
				h.encArray20uint8((*[20]uint8)(yy37), e)
				z.EncWriteMapElemKey()
				r.EncodeString(`email`)
				z.EncWriteMapElemValue()
				r.EncodeString(string(x.Email))
				z.EncWriteMapElemKey()
				r.EncodeString(`email_verified`)
				z.EncWriteMapElemValue()
				r.EncodeBool(bool(x.EmailVerified))
				z.EncWriteMapElemKey()
				r.EncodeString(`email_verification_token`)
				z.EncWriteMapElemValue()
				yy41 := &x.EmailVerificationToken
				h.encArray32uint8((*[32]uint8)(yy41), e)
				z.EncWriteMapElemKey()
				r.EncodeString(`email_verification_last`)
				z.EncWriteMapElemValue()
				if z.EncBasicHandle().TimeBuiltin() {
					r.EncodeTime(x.EmailVerificationLast)
				} else if yyxt43 := z.Extension(x.EmailVerificationLast); yyxt43 != nil {
					z.EncExtension(x.EmailVerificationLast, yyxt43)
				} else if z.EncBinary() {
					z.EncBinaryMarshal(x.EmailVerificationLast)
				} else if !z.EncBinary() && z.IsJSONHandle() {
					z.EncJSONMarshal(x.EmailVerificationLast)
				} else {
					z.EncFallback(x.EmailVerificationLast)
				}
			}
			z.EncWriteMapEnd()
		}
	}
}

func (x *User) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer42
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	yyct2 := r.ContainerType()
	if yyct2 == codecSelferValueTypeNil42 {
		*(x) = User{}
	} else if yyct2 == codecSelferValueTypeMap42 {
		yyl2 := z.DecReadMapStart()
		if yyl2 == 0 {
		} else {
			x.codecDecodeSelfFromMap(yyl2, d)
		}
		z.DecReadMapEnd()
	} else if yyct2 == codecSelferValueTypeArray42 {
		yyl2 := z.DecReadArrayStart()
		if yyl2 != 0 {
			x.codecDecodeSelfFromArray(yyl2, d)
		}
		z.DecReadArrayEnd()
	} else {
		panic(errCodecSelferOnlyMapOrArrayEncodeToStruct42)
	}
}

func (x *User) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer42
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if z.DecCheckBreak() {
				break
			}
		}
		z.DecReadMapElemKey()
		yys3 := r.DecodeStringAsBytes()
		z.DecReadMapElemValue()
		switch string(yys3) {
		case "created_at":
			if z.DecBasicHandle().TimeBuiltin() {
				x.CreatedAt = r.DecodeTime()
			} else if yyxt5 := z.Extension(x.CreatedAt); yyxt5 != nil {
				z.DecExtension(&x.CreatedAt, yyxt5)
			} else if z.DecBinary() {
				z.DecBinaryUnmarshal(&x.CreatedAt)
			} else if !z.DecBinary() && z.IsJSONHandle() {
				z.DecJSONUnmarshal(&x.CreatedAt)
			} else {
				z.DecFallback(&x.CreatedAt, false)
			}
		case "updated_at":
			if z.DecBasicHandle().TimeBuiltin() {
				x.UpdatedAt = r.DecodeTime()
			} else if yyxt7 := z.Extension(x.UpdatedAt); yyxt7 != nil {
				z.DecExtension(&x.UpdatedAt, yyxt7)
			} else if z.DecBinary() {
				z.DecBinaryUnmarshal(&x.UpdatedAt)
			} else if !z.DecBinary() && z.IsJSONHandle() {
				z.DecJSONUnmarshal(&x.UpdatedAt)
			} else {
				z.DecFallback(&x.UpdatedAt, false)
			}
		case "id":
			if yyxt9 := z.Extension(x.ID); yyxt9 != nil {
				z.DecExtension(&x.ID, yyxt9)
			} else if !z.DecBinary() && z.IsJSONHandle() {
				z.DecJSONUnmarshal(&x.ID)
			} else {
				z.F.DecSliceUint8N(([]uint8)(x.ID[:]), d)
			}
		case "addr":
			h.decArray20uint8((*[20]uint8)(&x.Address), d)
		case "email":
			x.Email = (string)(z.DecStringZC(r.DecodeStringAsBytes()))
		case "email_verified":
			x.EmailVerified = (bool)(r.DecodeBool())
		case "email_verification_token":
			h.decArray32uint8((*[32]uint8)(&x.EmailVerificationToken), d)
		case "email_verification_last":
			if z.DecBasicHandle().TimeBuiltin() {
				x.EmailVerificationLast = r.DecodeTime()
			} else if yyxt17 := z.Extension(x.EmailVerificationLast); yyxt17 != nil {
				z.DecExtension(&x.EmailVerificationLast, yyxt17)
			} else if z.DecBinary() {
				z.DecBinaryUnmarshal(&x.EmailVerificationLast)
			} else if !z.DecBinary() && z.IsJSONHandle() {
				z.DecJSONUnmarshal(&x.EmailVerificationLast)
			} else {
				z.DecFallback(&x.EmailVerificationLast, false)
			}
		default:
			z.DecStructFieldNotFound(-1, string(yys3))
		} // end switch yys3
	} // end for yyj3
}

func (x *User) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer42
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	var yyj18 int
	var yyb18 bool
	var yyhl18 bool = l >= 0
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = z.DecCheckBreak()
	}
	if yyb18 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if z.DecBasicHandle().TimeBuiltin() {
		x.CreatedAt = r.DecodeTime()
	} else if yyxt20 := z.Extension(x.CreatedAt); yyxt20 != nil {
		z.DecExtension(&x.CreatedAt, yyxt20)
	} else if z.DecBinary() {
		z.DecBinaryUnmarshal(&x.CreatedAt)
	} else if !z.DecBinary() && z.IsJSONHandle() {
		z.DecJSONUnmarshal(&x.CreatedAt)
	} else {
		z.DecFallback(&x.CreatedAt, false)
	}
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = z.DecCheckBreak()
	}
	if yyb18 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if z.DecBasicHandle().TimeBuiltin() {
		x.UpdatedAt = r.DecodeTime()
	} else if yyxt22 := z.Extension(x.UpdatedAt); yyxt22 != nil {
		z.DecExtension(&x.UpdatedAt, yyxt22)
	} else if z.DecBinary() {
		z.DecBinaryUnmarshal(&x.UpdatedAt)
	} else if !z.DecBinary() && z.IsJSONHandle() {
		z.DecJSONUnmarshal(&x.UpdatedAt)
	} else {
		z.DecFallback(&x.UpdatedAt, false)
	}
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = z.DecCheckBreak()
	}
	if yyb18 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if yyxt24 := z.Extension(x.ID); yyxt24 != nil {
		z.DecExtension(&x.ID, yyxt24)
	} else if !z.DecBinary() && z.IsJSONHandle() {
		z.DecJSONUnmarshal(&x.ID)
	} else {
		z.F.DecSliceUint8N(([]uint8)(x.ID[:]), d)
	}
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = z.DecCheckBreak()
	}
	if yyb18 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	h.decArray20uint8((*[20]uint8)(&x.Address), d)
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = z.DecCheckBreak()
	}
	if yyb18 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.Email = (string)(z.DecStringZC(r.DecodeStringAsBytes()))
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = z.DecCheckBreak()
	}
	if yyb18 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.EmailVerified = (bool)(r.DecodeBool())
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = z.DecCheckBreak()
	}
	if yyb18 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	h.decArray32uint8((*[32]uint8)(&x.EmailVerificationToken), d)
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = z.DecCheckBreak()
	}
	if yyb18 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if z.DecBasicHandle().TimeBuiltin() {
		x.EmailVerificationLast = r.DecodeTime()
	} else if yyxt32 := z.Extension(x.EmailVerificationLast); yyxt32 != nil {
		z.DecExtension(&x.EmailVerificationLast, yyxt32)
	} else if z.DecBinary() {
		z.DecBinaryUnmarshal(&x.EmailVerificationLast)
	} else if !z.DecBinary() && z.IsJSONHandle() {
		z.DecJSONUnmarshal(&x.EmailVerificationLast)
	} else {
		z.DecFallback(&x.EmailVerificationLast, false)
	}
	for {
		yyj18++
		if yyhl18 {
			yyb18 = yyj18 > l
		} else {
			yyb18 = z.DecCheckBreak()
		}
		if yyb18 {
			break
		}
		z.DecReadArrayElem()
		z.DecStructFieldNotFound(yyj18-1, "")
	}
}

func (x *User) IsCodecEmpty() bool {
	return !(!(x.CreatedAt.IsZero()) || !(x.UpdatedAt.IsZero()) || x.ID != pkg1_primitive.ObjectID{} || x.Address != [20]uint8{} || x.Email != "" || bool(x.EmailVerified) || x.EmailVerificationToken != [32]uint8{} || !(x.EmailVerificationLast.IsZero()) || false)
}

func (Feed) codecSelferViaCodecgen() {}
func (x *Feed) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer42
	z, r := codec1978.GenHelper().Encoder(e)
	_, _, _ = h, z, r
	if z.EncBasicHandle().CheckCircularRef {
		z.EncEncode(x)
		return
	}
	if x == nil {
		r.EncodeNil()
	} else {
		yy2arr2 := z.EncBasicHandle().StructToArray
		_ = yy2arr2
		const yyr2 bool = false // struct tag has 'toArray'
		if yyr2 || yy2arr2 {
			z.EncWriteArrayStart(8)
			z.EncWriteArrayElem()
			if z.EncBasicHandle().TimeBuiltin() {
				r.EncodeTime(x.CreatedAt)
			} else if yyxt11 := z.Extension(x.CreatedAt); yyxt11 != nil {
				z.EncExtension(x.CreatedAt, yyxt11)
			} else if z.EncBinary() {
				z.EncBinaryMarshal(x.CreatedAt)
			} else if !z.EncBinary() && z.IsJSONHandle() {
				z.EncJSONMarshal(x.CreatedAt)
			} else {
				z.EncFallback(x.CreatedAt)
			}
			z.EncWriteArrayElem()
			if z.EncBasicHandle().TimeBuiltin() {
				r.EncodeTime(x.UpdatedAt)
			} else if yyxt12 := z.Extension(x.UpdatedAt); yyxt12 != nil {
				z.EncExtension(x.UpdatedAt, yyxt12)
			} else if z.EncBinary() {
				z.EncBinaryMarshal(x.UpdatedAt)
			} else if !z.EncBinary() && z.IsJSONHandle() {
				z.EncJSONMarshal(x.UpdatedAt)
			} else {
				z.EncFallback(x.UpdatedAt)
			}
			z.EncWriteArrayElem()
			yy13 := &x.ID
			if yyxt14 := z.Extension(yy13); yyxt14 != nil {
				z.EncExtension(yy13, yyxt14)
			} else if !z.EncBinary() && z.IsJSONHandle() {
				z.EncJSONMarshal(*yy13)
			} else {
				z.F.EncSliceUint8V(([]uint8)(yy13[:]), e)
			}
			z.EncWriteArrayElem()
			yy15 := &x.Owner
			if yyxt16 := z.Extension(yy15); yyxt16 != nil {
				z.EncExtension(yy15, yyxt16)
			} else if !z.EncBinary() && z.IsJSONHandle() {
				z.EncJSONMarshal(*yy15)
			} else {
				z.F.EncSliceUint8V(([]uint8)(yy15[:]), e)
			}
			z.EncWriteArrayElem()
			r.EncodeString(string(x.Name))
			z.EncWriteArrayElem()
			r.EncodeString(string(x.URL))
			z.EncWriteArrayElem()
			if yyxt19 := z.Extension(x.Frequency); yyxt19 != nil {
				z.EncExtension(x.Frequency, yyxt19)
			} else {
				r.EncodeInt(int64(x.Frequency))
			}
			z.EncWriteArrayElem()
			if z.EncBasicHandle().TimeBuiltin() {
				r.EncodeTime(x.LastFetched)
			} else if yyxt20 := z.Extension(x.LastFetched); yyxt20 != nil {
				z.EncExtension(x.LastFetched, yyxt20)
			} else if z.EncBinary() {
				z.EncBinaryMarshal(x.LastFetched)
			} else if !z.EncBinary() && z.IsJSONHandle() {
				z.EncJSONMarshal(x.LastFetched)
			} else {
				z.EncFallback(x.LastFetched)
			}
			z.EncWriteArrayEnd()
		} else {
			z.EncWriteMapStart(8)
			if z.EncBasicHandle().Canonical {
				z.EncWriteMapElemKey()
				r.EncodeString(`created_at`)
				z.EncWriteMapElemValue()
				if z.EncBasicHandle().TimeBuiltin() {
					r.EncodeTime(x.CreatedAt)
				} else if yyxt21 := z.Extension(x.CreatedAt); yyxt21 != nil {
					z.EncExtension(x.CreatedAt, yyxt21)
				} else if z.EncBinary() {
					z.EncBinaryMarshal(x.CreatedAt)
				} else if !z.EncBinary() && z.IsJSONHandle() {
					z.EncJSONMarshal(x.CreatedAt)
				} else {
					z.EncFallback(x.CreatedAt)
				}
				z.EncWriteMapElemKey()
				r.EncodeString(`feed_url`)
				z.EncWriteMapElemValue()
				r.EncodeString(string(x.URL))
				z.EncWriteMapElemKey()
				r.EncodeString(`frequency`)
				z.EncWriteMapElemValue()
				if yyxt23 := z.Extension(x.Frequency); yyxt23 != nil {
					z.EncExtension(x.Frequency, yyxt23)
				} else {
					r.EncodeInt(int64(x.Frequency))
				}
				z.EncWriteMapElemKey()
				r.EncodeString(`id`)
				z.EncWriteMapElemValue()
				yy24 := &x.ID
				if yyxt25 := z.Extension(yy24); yyxt25 != nil {
					z.EncExtension(yy24, yyxt25)
				} else if !z.EncBinary() && z.IsJSONHandle() {
					z.EncJSONMarshal(*yy24)
				} else {
					z.F.EncSliceUint8V(([]uint8)(yy24[:]), e)
				}
				z.EncWriteMapElemKey()
				r.EncodeString(`last_fetched`)
				z.EncWriteMapElemValue()
				if z.EncBasicHandle().TimeBuiltin() {
					r.EncodeTime(x.LastFetched)
				} else if yyxt26 := z.Extension(x.LastFetched); yyxt26 != nil {
					z.EncExtension(x.LastFetched, yyxt26)
				} else if z.EncBinary() {
					z.EncBinaryMarshal(x.LastFetched)
				} else if !z.EncBinary() && z.IsJSONHandle() {
					z.EncJSONMarshal(x.LastFetched)
				} else {
					z.EncFallback(x.LastFetched)
				}
				z.EncWriteMapElemKey()
				r.EncodeString(`name`)
				z.EncWriteMapElemValue()
				r.EncodeString(string(x.Name))
				z.EncWriteMapElemKey()
				r.EncodeString(`owner_id`)
				z.EncWriteMapElemValue()
				yy28 := &x.Owner
				if yyxt29 := z.Extension(yy28); yyxt29 != nil {
					z.EncExtension(yy28, yyxt29)
				} else if !z.EncBinary() && z.IsJSONHandle() {
					z.EncJSONMarshal(*yy28)
				} else {
					z.F.EncSliceUint8V(([]uint8)(yy28[:]), e)
				}
				z.EncWriteMapElemKey()
				r.EncodeString(`updated_at`)
				z.EncWriteMapElemValue()
				if z.EncBasicHandle().TimeBuiltin() {
					r.EncodeTime(x.UpdatedAt)
				} else if yyxt30 := z.Extension(x.UpdatedAt); yyxt30 != nil {
					z.EncExtension(x.UpdatedAt, yyxt30)
				} else if z.EncBinary() {
					z.EncBinaryMarshal(x.UpdatedAt)
				} else if !z.EncBinary() && z.IsJSONHandle() {
					z.EncJSONMarshal(x.UpdatedAt)
				} else {
					z.EncFallback(x.UpdatedAt)
				}
			} else {
				z.EncWriteMapElemKey()
				r.EncodeString(`created_at`)
				z.EncWriteMapElemValue()
				if z.EncBasicHandle().TimeBuiltin() {
					r.EncodeTime(x.CreatedAt)
				} else if yyxt31 := z.Extension(x.CreatedAt); yyxt31 != nil {
					z.EncExtension(x.CreatedAt, yyxt31)
				} else if z.EncBinary() {
					z.EncBinaryMarshal(x.CreatedAt)
				} else if !z.EncBinary() && z.IsJSONHandle() {
					z.EncJSONMarshal(x.CreatedAt)
				} else {
					z.EncFallback(x.CreatedAt)
				}
				z.EncWriteMapElemKey()
				r.EncodeString(`updated_at`)
				z.EncWriteMapElemValue()
				if z.EncBasicHandle().TimeBuiltin() {
					r.EncodeTime(x.UpdatedAt)
				} else if yyxt32 := z.Extension(x.UpdatedAt); yyxt32 != nil {
					z.EncExtension(x.UpdatedAt, yyxt32)
				} else if z.EncBinary() {
					z.EncBinaryMarshal(x.UpdatedAt)
				} else if !z.EncBinary() && z.IsJSONHandle() {
					z.EncJSONMarshal(x.UpdatedAt)
				} else {
					z.EncFallback(x.UpdatedAt)
				}
				z.EncWriteMapElemKey()
				r.EncodeString(`id`)
				z.EncWriteMapElemValue()
				yy33 := &x.ID
				if yyxt34 := z.Extension(yy33); yyxt34 != nil {
					z.EncExtension(yy33, yyxt34)
				} else if !z.EncBinary() && z.IsJSONHandle() {
					z.EncJSONMarshal(*yy33)
				} else {
					z.F.EncSliceUint8V(([]uint8)(yy33[:]), e)
				}
				z.EncWriteMapElemKey()
				r.EncodeString(`owner_id`)
				z.EncWriteMapElemValue()
				yy35 := &x.Owner
				if yyxt36 := z.Extension(yy35); yyxt36 != nil {
					z.EncExtension(yy35, yyxt36)
				} else if !z.EncBinary() && z.IsJSONHandle() {
					z.EncJSONMarshal(*yy35)
				} else {
					z.F.EncSliceUint8V(([]uint8)(yy35[:]), e)
				}
				z.EncWriteMapElemKey()
				r.EncodeString(`name`)
				z.EncWriteMapElemValue()
				r.EncodeString(string(x.Name))
				z.EncWriteMapElemKey()
				r.EncodeString(`feed_url`)
				z.EncWriteMapElemValue()
				r.EncodeString(string(x.URL))
				z.EncWriteMapElemKey()
				r.EncodeString(`frequency`)
				z.EncWriteMapElemValue()
				if yyxt39 := z.Extension(x.Frequency); yyxt39 != nil {
					z.EncExtension(x.Frequency, yyxt39)
				} else {
					r.EncodeInt(int64(x.Frequency))
				}
				z.EncWriteMapElemKey()
				r.EncodeString(`last_fetched`)
				z.EncWriteMapElemValue()
				if z.EncBasicHandle().TimeBuiltin() {
					r.EncodeTime(x.LastFetched)
				} else if yyxt40 := z.Extension(x.LastFetched); yyxt40 != nil {
					z.EncExtension(x.LastFetched, yyxt40)
				} else if z.EncBinary() {
					z.EncBinaryMarshal(x.LastFetched)
				} else if !z.EncBinary() && z.IsJSONHandle() {
					z.EncJSONMarshal(x.LastFetched)
				} else {
					z.EncFallback(x.LastFetched)
				}
			}
			z.EncWriteMapEnd()
		}
	}
}

func (x *Feed) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer42
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	yyct2 := r.ContainerType()
	if yyct2 == codecSelferValueTypeNil42 {
		*(x) = Feed{}
	} else if yyct2 == codecSelferValueTypeMap42 {
		yyl2 := z.DecReadMapStart()
		if yyl2 == 0 {
		} else {
			x.codecDecodeSelfFromMap(yyl2, d)
		}
		z.DecReadMapEnd()
	} else if yyct2 == codecSelferValueTypeArray42 {
		yyl2 := z.DecReadArrayStart()
		if yyl2 != 0 {
			x.codecDecodeSelfFromArray(yyl2, d)
		}
		z.DecReadArrayEnd()
	} else {
		panic(errCodecSelferOnlyMapOrArrayEncodeToStruct42)
	}
}

func (x *Feed) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer42
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if z.DecCheckBreak() {
				break
			}
		}
		z.DecReadMapElemKey()
		yys3 := r.DecodeStringAsBytes()
		z.DecReadMapElemValue()
		switch string(yys3) {
		case "created_at":
			if z.DecBasicHandle().TimeBuiltin() {
				x.CreatedAt = r.DecodeTime()
			} else if yyxt5 := z.Extension(x.CreatedAt); yyxt5 != nil {
				z.DecExtension(&x.CreatedAt, yyxt5)
			} else if z.DecBinary() {
				z.DecBinaryUnmarshal(&x.CreatedAt)
			} else if !z.DecBinary() && z.IsJSONHandle() {
				z.DecJSONUnmarshal(&x.CreatedAt)
			} else {
				z.DecFallback(&x.CreatedAt, false)
			}
		case "updated_at":
			if z.DecBasicHandle().TimeBuiltin() {
				x.UpdatedAt = r.DecodeTime()
			} else if yyxt7 := z.Extension(x.UpdatedAt); yyxt7 != nil {
				z.DecExtension(&x.UpdatedAt, yyxt7)
			} else if z.DecBinary() {
				z.DecBinaryUnmarshal(&x.UpdatedAt)
			} else if !z.DecBinary() && z.IsJSONHandle() {
				z.DecJSONUnmarshal(&x.UpdatedAt)
			} else {
				z.DecFallback(&x.UpdatedAt, false)
			}
		case "id":
			if yyxt9 := z.Extension(x.ID); yyxt9 != nil {
				z.DecExtension(&x.ID, yyxt9)
			} else if !z.DecBinary() && z.IsJSONHandle() {
				z.DecJSONUnmarshal(&x.ID)
			} else {
				z.F.DecSliceUint8N(([]uint8)(x.ID[:]), d)
			}
		case "owner_id":
			if yyxt11 := z.Extension(x.Owner); yyxt11 != nil {
				z.DecExtension(&x.Owner, yyxt11)
			} else if !z.DecBinary() && z.IsJSONHandle() {
				z.DecJSONUnmarshal(&x.Owner)
			} else {
				z.F.DecSliceUint8N(([]uint8)(x.Owner[:]), d)
			}
		case "name":
			x.Name = (string)(z.DecStringZC(r.DecodeStringAsBytes()))
		case "feed_url":
			x.URL = (string)(z.DecStringZC(r.DecodeStringAsBytes()))
		case "frequency":
			if yyxt15 := z.Extension(x.Frequency); yyxt15 != nil {
				z.DecExtension(&x.Frequency, yyxt15)
			} else {
				x.Frequency = (time.Duration)(r.DecodeInt64())
			}
		case "last_fetched":
			if z.DecBasicHandle().TimeBuiltin() {
				x.LastFetched = r.DecodeTime()
			} else if yyxt17 := z.Extension(x.LastFetched); yyxt17 != nil {
				z.DecExtension(&x.LastFetched, yyxt17)
			} else if z.DecBinary() {
				z.DecBinaryUnmarshal(&x.LastFetched)
			} else if !z.DecBinary() && z.IsJSONHandle() {
				z.DecJSONUnmarshal(&x.LastFetched)
			} else {
				z.DecFallback(&x.LastFetched, false)
			}
		default:
			z.DecStructFieldNotFound(-1, string(yys3))
		} // end switch yys3
	} // end for yyj3
}

func (x *Feed) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer42
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	var yyj18 int
	var yyb18 bool
	var yyhl18 bool = l >= 0
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = z.DecCheckBreak()
	}
	if yyb18 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if z.DecBasicHandle().TimeBuiltin() {
		x.CreatedAt = r.DecodeTime()
	} else if yyxt20 := z.Extension(x.CreatedAt); yyxt20 != nil {
		z.DecExtension(&x.CreatedAt, yyxt20)
	} else if z.DecBinary() {
		z.DecBinaryUnmarshal(&x.CreatedAt)
	} else if !z.DecBinary() && z.IsJSONHandle() {
		z.DecJSONUnmarshal(&x.CreatedAt)
	} else {
		z.DecFallback(&x.CreatedAt, false)
	}
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = z.DecCheckBreak()
	}
	if yyb18 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if z.DecBasicHandle().TimeBuiltin() {
		x.UpdatedAt = r.DecodeTime()
	} else if yyxt22 := z.Extension(x.UpdatedAt); yyxt22 != nil {
		z.DecExtension(&x.UpdatedAt, yyxt22)
	} else if z.DecBinary() {
		z.DecBinaryUnmarshal(&x.UpdatedAt)
	} else if !z.DecBinary() && z.IsJSONHandle() {
		z.DecJSONUnmarshal(&x.UpdatedAt)
	} else {
		z.DecFallback(&x.UpdatedAt, false)
	}
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = z.DecCheckBreak()
	}
	if yyb18 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if yyxt24 := z.Extension(x.ID); yyxt24 != nil {
		z.DecExtension(&x.ID, yyxt24)
	} else if !z.DecBinary() && z.IsJSONHandle() {
		z.DecJSONUnmarshal(&x.ID)
	} else {
		z.F.DecSliceUint8N(([]uint8)(x.ID[:]), d)
	}
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = z.DecCheckBreak()
	}
	if yyb18 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if yyxt26 := z.Extension(x.Owner); yyxt26 != nil {
		z.DecExtension(&x.Owner, yyxt26)
	} else if !z.DecBinary() && z.IsJSONHandle() {
		z.DecJSONUnmarshal(&x.Owner)
	} else {
		z.F.DecSliceUint8N(([]uint8)(x.Owner[:]), d)
	}
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = z.DecCheckBreak()
	}
	if yyb18 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.Name = (string)(z.DecStringZC(r.DecodeStringAsBytes()))
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = z.DecCheckBreak()
	}
	if yyb18 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.URL = (string)(z.DecStringZC(r.DecodeStringAsBytes()))
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = z.DecCheckBreak()
	}
	if yyb18 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if yyxt30 := z.Extension(x.Frequency); yyxt30 != nil {
		z.DecExtension(&x.Frequency, yyxt30)
	} else {
		x.Frequency = (time.Duration)(r.DecodeInt64())
	}
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = z.DecCheckBreak()
	}
	if yyb18 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if z.DecBasicHandle().TimeBuiltin() {
		x.LastFetched = r.DecodeTime()
	} else if yyxt32 := z.Extension(x.LastFetched); yyxt32 != nil {
		z.DecExtension(&x.LastFetched, yyxt32)
	} else if z.DecBinary() {
		z.DecBinaryUnmarshal(&x.LastFetched)
	} else if !z.DecBinary() && z.IsJSONHandle() {
		z.DecJSONUnmarshal(&x.LastFetched)
	} else {
		z.DecFallback(&x.LastFetched, false)
	}
	for {
		yyj18++
		if yyhl18 {
			yyb18 = yyj18 > l
		} else {
			yyb18 = z.DecCheckBreak()
		}
		if yyb18 {
			break
		}
		z.DecReadArrayElem()
		z.DecStructFieldNotFound(yyj18-1, "")
	}
}

func (x *Feed) IsCodecEmpty() bool {
	return !(!(x.CreatedAt.IsZero()) || !(x.UpdatedAt.IsZero()) || x.ID != pkg1_primitive.ObjectID{} || x.Owner != pkg1_primitive.ObjectID{} || x.Name != "" || x.URL != "" || x.Frequency != 0 || !(x.LastFetched.IsZero()) || false)
}

func (SeenItem) codecSelferViaCodecgen() {}
func (x *SeenItem) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer42
	z, r := codec1978.GenHelper().Encoder(e)
	_, _, _ = h, z, r
	if z.EncBasicHandle().CheckCircularRef {
		z.EncEncode(x)
		return
	}
	if x == nil {
		r.EncodeNil()
	} else {
		yy2arr2 := z.EncBasicHandle().StructToArray
		_ = yy2arr2
		const yyr2 bool = false // struct tag has 'toArray'
		if yyr2 || yy2arr2 {
			z.EncWriteArrayStart(4)
			z.EncWriteArrayElem()
			yy7 := &x.ID
			if yyxt8 := z.Extension(yy7); yyxt8 != nil {
				z.EncExtension(yy7, yyxt8)
			} else if !z.EncBinary() && z.IsJSONHandle() {
				z.EncJSONMarshal(*yy7)
			} else {
				z.F.EncSliceUint8V(([]uint8)(yy7[:]), e)
			}
			z.EncWriteArrayElem()
			yy9 := &x.FeedID
			if yyxt10 := z.Extension(yy9); yyxt10 != nil {
				z.EncExtension(yy9, yyxt10)
			} else if !z.EncBinary() && z.IsJSONHandle() {
				z.EncJSONMarshal(*yy9)
			} else {
				z.F.EncSliceUint8V(([]uint8)(yy9[:]), e)
			}
			z.EncWriteArrayElem()
			r.EncodeString(string(x.GUID))
			z.EncWriteArrayElem()
			if z.EncBasicHandle().TimeBuiltin() {
				r.EncodeTime(x.Timestamp)
			} else if yyxt12 := z.Extension(x.Timestamp); yyxt12 != nil {
				z.EncExtension(x.Timestamp, yyxt12)
			} else if z.EncBinary() {
				z.EncBinaryMarshal(x.Timestamp)
			} else if !z.EncBinary() && z.IsJSONHandle() {
				z.EncJSONMarshal(x.Timestamp)
			} else {
				z.EncFallback(x.Timestamp)
			}
			z.EncWriteArrayEnd()
		} else {
			z.EncWriteMapStart(4)
			if z.EncBasicHandle().Canonical {
				z.EncWriteMapElemKey()
				r.EncodeString(`feed_id`)
				z.EncWriteMapElemValue()
				yy13 := &x.FeedID
				if yyxt14 := z.Extension(yy13); yyxt14 != nil {
					z.EncExtension(yy13, yyxt14)
				} else if !z.EncBinary() && z.IsJSONHandle() {
					z.EncJSONMarshal(*yy13)
				} else {
					z.F.EncSliceUint8V(([]uint8)(yy13[:]), e)
				}
				z.EncWriteMapElemKey()
				r.EncodeString(`guid`)
				z.EncWriteMapElemValue()
				r.EncodeString(string(x.GUID))
				z.EncWriteMapElemKey()
				r.EncodeString(`id`)
				z.EncWriteMapElemValue()
				yy16 := &x.ID
				if yyxt17 := z.Extension(yy16); yyxt17 != nil {
					z.EncExtension(yy16, yyxt17)
				} else if !z.EncBinary() && z.IsJSONHandle() {
					z.EncJSONMarshal(*yy16)
				} else {
					z.F.EncSliceUint8V(([]uint8)(yy16[:]), e)
				}
				z.EncWriteMapElemKey()
				r.EncodeString(`timestamp`)
				z.EncWriteMapElemValue()
				if z.EncBasicHandle().TimeBuiltin() {
					r.EncodeTime(x.Timestamp)
				} else if yyxt18 := z.Extension(x.Timestamp); yyxt18 != nil {
					z.EncExtension(x.Timestamp, yyxt18)
				} else if z.EncBinary() {
					z.EncBinaryMarshal(x.Timestamp)
				} else if !z.EncBinary() && z.IsJSONHandle() {
					z.EncJSONMarshal(x.Timestamp)
				} else {
					z.EncFallback(x.Timestamp)
				}
			} else {
				z.EncWriteMapElemKey()
				r.EncodeString(`id`)
				z.EncWriteMapElemValue()
				yy19 := &x.ID
				if yyxt20 := z.Extension(yy19); yyxt20 != nil {
					z.EncExtension(yy19, yyxt20)
				} else if !z.EncBinary() && z.IsJSONHandle() {
					z.EncJSONMarshal(*yy19)
				} else {
					z.F.EncSliceUint8V(([]uint8)(yy19[:]), e)
				}
				z.EncWriteMapElemKey()
				r.EncodeString(`feed_id`)
				z.EncWriteMapElemValue()
				yy21 := &x.FeedID
				if yyxt22 := z.Extension(yy21); yyxt22 != nil {
					z.EncExtension(yy21, yyxt22)
				} else if !z.EncBinary() && z.IsJSONHandle() {
					z.EncJSONMarshal(*yy21)
				} else {
					z.F.EncSliceUint8V(([]uint8)(yy21[:]), e)
				}
				z.EncWriteMapElemKey()
				r.EncodeString(`guid`)
				z.EncWriteMapElemValue()
				r.EncodeString(string(x.GUID))
				z.EncWriteMapElemKey()
				r.EncodeString(`timestamp`)
				z.EncWriteMapElemValue()
				if z.EncBasicHandle().TimeBuiltin() {
					r.EncodeTime(x.Timestamp)
				} else if yyxt24 := z.Extension(x.Timestamp); yyxt24 != nil {
					z.EncExtension(x.Timestamp, yyxt24)
				} else if z.EncBinary() {
					z.EncBinaryMarshal(x.Timestamp)
				} else if !z.EncBinary() && z.IsJSONHandle() {
					z.EncJSONMarshal(x.Timestamp)
				} else {
					z.EncFallback(x.Timestamp)
				}
			}
			z.EncWriteMapEnd()
		}
	}
}

func (x *SeenItem) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer42
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	yyct2 := r.ContainerType()
	if yyct2 == codecSelferValueTypeNil42 {
		*(x) = SeenItem{}
	} else if yyct2 == codecSelferValueTypeMap42 {
		yyl2 := z.DecReadMapStart()
		if yyl2 == 0 {
		} else {
			x.codecDecodeSelfFromMap(yyl2, d)
		}
		z.DecReadMapEnd()
	} else if yyct2 == codecSelferValueTypeArray42 {
		yyl2 := z.DecReadArrayStart()
		if yyl2 != 0 {
			x.codecDecodeSelfFromArray(yyl2, d)
		}
		z.DecReadArrayEnd()
	} else {
		panic(errCodecSelferOnlyMapOrArrayEncodeToStruct42)
	}
}

func (x *SeenItem) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer42
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if z.DecCheckBreak() {
				break
			}
		}
		z.DecReadMapElemKey()
		yys3 := r.DecodeStringAsBytes()
		z.DecReadMapElemValue()
		switch string(yys3) {
		case "id":
			if yyxt5 := z.Extension(x.ID); yyxt5 != nil {
				z.DecExtension(&x.ID, yyxt5)
			} else if !z.DecBinary() && z.IsJSONHandle() {
				z.DecJSONUnmarshal(&x.ID)
			} else {
				z.F.DecSliceUint8N(([]uint8)(x.ID[:]), d)
			}
		case "feed_id":
			if yyxt7 := z.Extension(x.FeedID); yyxt7 != nil {
				z.DecExtension(&x.FeedID, yyxt7)
			} else if !z.DecBinary() && z.IsJSONHandle() {
				z.DecJSONUnmarshal(&x.FeedID)
			} else {
				z.F.DecSliceUint8N(([]uint8)(x.FeedID[:]), d)
			}
		case "guid":
			x.GUID = (string)(z.DecStringZC(r.DecodeStringAsBytes()))
		case "timestamp":
			if z.DecBasicHandle().TimeBuiltin() {
				x.Timestamp = r.DecodeTime()
			} else if yyxt10 := z.Extension(x.Timestamp); yyxt10 != nil {
				z.DecExtension(&x.Timestamp, yyxt10)
			} else if z.DecBinary() {
				z.DecBinaryUnmarshal(&x.Timestamp)
			} else if !z.DecBinary() && z.IsJSONHandle() {
				z.DecJSONUnmarshal(&x.Timestamp)
			} else {
				z.DecFallback(&x.Timestamp, false)
			}
		default:
			z.DecStructFieldNotFound(-1, string(yys3))
		} // end switch yys3
	} // end for yyj3
}

func (x *SeenItem) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer42
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	var yyj11 int
	var yyb11 bool
	var yyhl11 bool = l >= 0
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = z.DecCheckBreak()
	}
	if yyb11 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if yyxt13 := z.Extension(x.ID); yyxt13 != nil {
		z.DecExtension(&x.ID, yyxt13)
	} else if !z.DecBinary() && z.IsJSONHandle() {
		z.DecJSONUnmarshal(&x.ID)
	} else {
		z.F.DecSliceUint8N(([]uint8)(x.ID[:]), d)
	}
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = z.DecCheckBreak()
	}
	if yyb11 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if yyxt15 := z.Extension(x.FeedID); yyxt15 != nil {
		z.DecExtension(&x.FeedID, yyxt15)
	} else if !z.DecBinary() && z.IsJSONHandle() {
		z.DecJSONUnmarshal(&x.FeedID)
	} else {
		z.F.DecSliceUint8N(([]uint8)(x.FeedID[:]), d)
	}
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = z.DecCheckBreak()
	}
	if yyb11 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.GUID = (string)(z.DecStringZC(r.DecodeStringAsBytes()))
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = z.DecCheckBreak()
	}
	if yyb11 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if z.DecBasicHandle().TimeBuiltin() {
		x.Timestamp = r.DecodeTime()
	} else if yyxt18 := z.Extension(x.Timestamp); yyxt18 != nil {
		z.DecExtension(&x.Timestamp, yyxt18)
	} else if z.DecBinary() {
		z.DecBinaryUnmarshal(&x.Timestamp)
	} else if !z.DecBinary() && z.IsJSONHandle() {
		z.DecJSONUnmarshal(&x.Timestamp)
	} else {
		z.DecFallback(&x.Timestamp, false)
	}
	for {
		yyj11++
		if yyhl11 {
			yyb11 = yyj11 > l
		} else {
			yyb11 = z.DecCheckBreak()
		}
		if yyb11 {
			break
		}
		z.DecReadArrayElem()
		z.DecStructFieldNotFound(yyj11-1, "")
	}
}

func (x *SeenItem) IsCodecEmpty() bool {
	return !(x.ID != pkg1_primitive.ObjectID{} || x.FeedID != pkg1_primitive.ObjectID{} || x.GUID != "" || !(x.Timestamp.IsZero()) || false)
}

func (ErrorMessage) codecSelferViaCodecgen() {}
func (x *ErrorMessage) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer42
	z, r := codec1978.GenHelper().Encoder(e)
	_, _, _ = h, z, r
	if z.EncBasicHandle().CheckCircularRef {
		z.EncEncode(x)
		return
	}
	if x == nil {
		r.EncodeNil()
	} else {
		yy2arr2 := z.EncBasicHandle().StructToArray
		_ = yy2arr2
		const yyr2 bool = true // struct tag has 'toArray'
		var yyq2 = [2]bool{    // should field at this index be written?
			x.Code != 0,     // Code
			x.Message != "", // Message
		}
		_ = yyq2
		if yyr2 || yy2arr2 {
			z.EncWriteArrayStart(2)
			z.EncWriteArrayElem()
			if yyq2[0] {
				if yyxt5 := z.Extension(x.Code); yyxt5 != nil {
					z.EncExtension(x.Code, yyxt5)
				} else {
					r.EncodeUint(uint64(x.Code))
				}
			} else {
				r.EncodeUint(0)
			}
			z.EncWriteArrayElem()
			if yyq2[1] {
				r.EncodeString(string(x.Message))
			} else {
				r.EncodeString("")
			}
			z.EncWriteArrayEnd()
		} else {
			var yynn2 int
			for _, b := range yyq2 {
				if b {
					yynn2++
				}
			}
			z.EncWriteMapStart(yynn2)
			yynn2 = 0
			if z.EncBasicHandle().Canonical {
				if yyq2[0] {
					z.EncWriteMapElemKey()
					r.EncodeString(`Code`)
					z.EncWriteMapElemValue()
					if yyxt7 := z.Extension(x.Code); yyxt7 != nil {
						z.EncExtension(x.Code, yyxt7)
					} else {
						r.EncodeUint(uint64(x.Code))
					}
				}
				if yyq2[1] {
					z.EncWriteMapElemKey()
					r.EncodeString(`Message`)
					z.EncWriteMapElemValue()
					r.EncodeString(string(x.Message))
				}
			} else {
				if yyq2[0] {
					z.EncWriteMapElemKey()
					r.EncodeString(`Code`)
					z.EncWriteMapElemValue()
					if yyxt9 := z.Extension(x.Code); yyxt9 != nil {
						z.EncExtension(x.Code, yyxt9)
					} else {
						r.EncodeUint(uint64(x.Code))
					}
				}
				if yyq2[1] {
					z.EncWriteMapElemKey()
					r.EncodeString(`Message`)
					z.EncWriteMapElemValue()
					r.EncodeString(string(x.Message))
				}
			}
			z.EncWriteMapEnd()
		}
	}
}

func (x *ErrorMessage) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer42
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	yyct2 := r.ContainerType()
	if yyct2 == codecSelferValueTypeNil42 {
		*(x) = ErrorMessage{}
	} else if yyct2 == codecSelferValueTypeMap42 {
		yyl2 := z.DecReadMapStart()
		if yyl2 == 0 {
		} else {
			x.codecDecodeSelfFromMap(yyl2, d)
		}
		z.DecReadMapEnd()
	} else if yyct2 == codecSelferValueTypeArray42 {
		yyl2 := z.DecReadArrayStart()
		if yyl2 != 0 {
			x.codecDecodeSelfFromArray(yyl2, d)
		}
		z.DecReadArrayEnd()
	} else {
		panic(errCodecSelferOnlyMapOrArrayEncodeToStruct42)
	}
}

func (x *ErrorMessage) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer42
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if z.DecCheckBreak() {
				break
			}
		}
		z.DecReadMapElemKey()
		yys3 := r.DecodeStringAsBytes()
		z.DecReadMapElemValue()
		switch string(yys3) {
		case "Code":
			if yyxt5 := z.Extension(x.Code); yyxt5 != nil {
				z.DecExtension(&x.Code, yyxt5)
			} else {
				x.Code = (ErrorCode)(r.DecodeUint64())
			}
		case "Message":
			x.Message = (string)(z.DecStringZC(r.DecodeStringAsBytes()))
		default:
			z.DecStructFieldNotFound(-1, string(yys3))
		} // end switch yys3
	} // end for yyj3
}

func (x *ErrorMessage) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer42
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	var yyj7 int
	var yyb7 bool
	var yyhl7 bool = l >= 0
	yyj7++
	if yyhl7 {
		yyb7 = yyj7 > l
	} else {
		yyb7 = z.DecCheckBreak()
	}
	if yyb7 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if yyxt9 := z.Extension(x.Code); yyxt9 != nil {
		z.DecExtension(&x.Code, yyxt9)
	} else {
		x.Code = (ErrorCode)(r.DecodeUint64())
	}
	yyj7++
	if yyhl7 {
		yyb7 = yyj7 > l
	} else {
		yyb7 = z.DecCheckBreak()
	}
	if yyb7 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.Message = (string)(z.DecStringZC(r.DecodeStringAsBytes()))
	for {
		yyj7++
		if yyhl7 {
			yyb7 = yyj7 > l
		} else {
			yyb7 = z.DecCheckBreak()
		}
		if yyb7 {
			break
		}
		z.DecReadArrayElem()
		z.DecStructFieldNotFound(yyj7-1, "")
	}
}

func (x *ErrorMessage) IsCodecEmpty() bool {
	return !(x.Code != 0 || x.Message != "" || false)
}

func (InitializationRequest) codecSelferViaCodecgen() {}
func (x *InitializationRequest) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer42
	z, r := codec1978.GenHelper().Encoder(e)
	_, _, _ = h, z, r
	if z.EncBasicHandle().CheckCircularRef {
		z.EncEncode(x)
		return
	}
	if x == nil {
		r.EncodeNil()
	} else {
		yy2arr2 := z.EncBasicHandle().StructToArray
		_ = yy2arr2
		const yyr2 bool = false // struct tag has 'toArray'
		if yyr2 || yy2arr2 {
			z.EncWriteArrayStart(2)
			z.EncWriteArrayElem()
			yy5 := &x.Address
			h.encArray20uint8((*[20]uint8)(yy5), e)
			z.EncWriteArrayElem()
			r.EncodeString(string(x.Locale))
			z.EncWriteArrayEnd()
		} else {
			z.EncWriteMapStart(2)
			if z.EncBasicHandle().Canonical {
				z.EncWriteMapElemKey()
				r.EncodeString(`address`)
				z.EncWriteMapElemValue()
				yy8 := &x.Address
				h.encArray20uint8((*[20]uint8)(yy8), e)
				z.EncWriteMapElemKey()
				r.EncodeString(`locale`)
				z.EncWriteMapElemValue()
				r.EncodeString(string(x.Locale))
			} else {
				z.EncWriteMapElemKey()
				r.EncodeString(`address`)
				z.EncWriteMapElemValue()
				yy11 := &x.Address
				h.encArray20uint8((*[20]uint8)(yy11), e)
				z.EncWriteMapElemKey()
				r.EncodeString(`locale`)
				z.EncWriteMapElemValue()
				r.EncodeString(string(x.Locale))
			}
			z.EncWriteMapEnd()
		}
	}
}

func (x *InitializationRequest) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer42
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	yyct2 := r.ContainerType()
	if yyct2 == codecSelferValueTypeNil42 {
		*(x) = InitializationRequest{}
	} else if yyct2 == codecSelferValueTypeMap42 {
		yyl2 := z.DecReadMapStart()
		if yyl2 == 0 {
		} else {
			x.codecDecodeSelfFromMap(yyl2, d)
		}
		z.DecReadMapEnd()
	} else if yyct2 == codecSelferValueTypeArray42 {
		yyl2 := z.DecReadArrayStart()
		if yyl2 != 0 {
			x.codecDecodeSelfFromArray(yyl2, d)
		}
		z.DecReadArrayEnd()
	} else {
		panic(errCodecSelferOnlyMapOrArrayEncodeToStruct42)
	}
}

func (x *InitializationRequest) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer42
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if z.DecCheckBreak() {
				break
			}
		}
		z.DecReadMapElemKey()
		yys3 := r.DecodeStringAsBytes()
		z.DecReadMapElemValue()
		switch string(yys3) {
		case "address":
			h.decArray20uint8((*[20]uint8)(&x.Address), d)
		case "locale":
			x.Locale = (string)(z.DecStringZC(r.DecodeStringAsBytes()))
		default:
			z.DecStructFieldNotFound(-1, string(yys3))
		} // end switch yys3
	} // end for yyj3
}

func (x *InitializationRequest) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer42
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	var yyj7 int
	var yyb7 bool
	var yyhl7 bool = l >= 0
	yyj7++
	if yyhl7 {
		yyb7 = yyj7 > l
	} else {
		yyb7 = z.DecCheckBreak()
	}
	if yyb7 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	h.decArray20uint8((*[20]uint8)(&x.Address), d)
	yyj7++
	if yyhl7 {
		yyb7 = yyj7 > l
	} else {
		yyb7 = z.DecCheckBreak()
	}
	if yyb7 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.Locale = (string)(z.DecStringZC(r.DecodeStringAsBytes()))
	for {
		yyj7++
		if yyhl7 {
			yyb7 = yyj7 > l
		} else {
			yyb7 = z.DecCheckBreak()
		}
		if yyb7 {
			break
		}
		z.DecReadArrayElem()
		z.DecStructFieldNotFound(yyj7-1, "")
	}
}

func (x *InitializationRequest) IsCodecEmpty() bool {
	return !(x.Address != [20]uint8{} || x.Locale != "" || false)
}

func (InitializationResponse) codecSelferViaCodecgen() {}
func (x *InitializationResponse) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer42
	z, r := codec1978.GenHelper().Encoder(e)
	_, _, _ = h, z, r
	if z.EncBasicHandle().CheckCircularRef {
		z.EncEncode(x)
		return
	}
	if x == nil {
		r.EncodeNil()
	} else {
		yy2arr2 := z.EncBasicHandle().StructToArray
		_ = yy2arr2
		const yyr2 bool = false // struct tag has 'toArray'
		if yyr2 || yy2arr2 {
			z.EncWriteArrayStart(2)
			z.EncWriteArrayElem()
			r.EncodeBool(bool(x.UserFound))
			z.EncWriteArrayElem()
			if x.Challenge == nil {
				r.EncodeNil()
			} else {
				r.EncodeStringBytesRaw([]byte(x.Challenge))
			} // end block: if x.Challenge slice == nil
			z.EncWriteArrayEnd()
		} else {
			z.EncWriteMapStart(2)
			if z.EncBasicHandle().Canonical {
				z.EncWriteMapElemKey()
				r.EncodeString(`challenge`)
				z.EncWriteMapElemValue()
				if x.Challenge == nil {
					r.EncodeNil()
				} else {
					r.EncodeStringBytesRaw([]byte(x.Challenge))
				} // end block: if x.Challenge slice == nil
				z.EncWriteMapElemKey()
				r.EncodeString(`user_found`)
				z.EncWriteMapElemValue()
				r.EncodeBool(bool(x.UserFound))
			} else {
				z.EncWriteMapElemKey()
				r.EncodeString(`user_found`)
				z.EncWriteMapElemValue()
				r.EncodeBool(bool(x.UserFound))
				z.EncWriteMapElemKey()
				r.EncodeString(`challenge`)
				z.EncWriteMapElemValue()
				if x.Challenge == nil {
					r.EncodeNil()
				} else {
					r.EncodeStringBytesRaw([]byte(x.Challenge))
				} // end block: if x.Challenge slice == nil
			}
			z.EncWriteMapEnd()
		}
	}
}

func (x *InitializationResponse) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer42
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	yyct2 := r.ContainerType()
	if yyct2 == codecSelferValueTypeNil42 {
		*(x) = InitializationResponse{}
	} else if yyct2 == codecSelferValueTypeMap42 {
		yyl2 := z.DecReadMapStart()
		if yyl2 == 0 {
		} else {
			x.codecDecodeSelfFromMap(yyl2, d)
		}
		z.DecReadMapEnd()
	} else if yyct2 == codecSelferValueTypeArray42 {
		yyl2 := z.DecReadArrayStart()
		if yyl2 != 0 {
			x.codecDecodeSelfFromArray(yyl2, d)
		}
		z.DecReadArrayEnd()
	} else {
		panic(errCodecSelferOnlyMapOrArrayEncodeToStruct42)
	}
}

func (x *InitializationResponse) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer42
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if z.DecCheckBreak() {
				break
			}
		}
		z.DecReadMapElemKey()
		yys3 := r.DecodeStringAsBytes()
		z.DecReadMapElemValue()
		switch string(yys3) {
		case "user_found":
			x.UserFound = (bool)(r.DecodeBool())
		case "challenge":
			x.Challenge = z.DecodeBytesInto(([]byte)(x.Challenge))
		default:
			z.DecStructFieldNotFound(-1, string(yys3))
		} // end switch yys3
	} // end for yyj3
}

func (x *InitializationResponse) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer42
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	var yyj7 int
	var yyb7 bool
	var yyhl7 bool = l >= 0
	yyj7++
	if yyhl7 {
		yyb7 = yyj7 > l
	} else {
		yyb7 = z.DecCheckBreak()
	}
	if yyb7 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.UserFound = (bool)(r.DecodeBool())
	yyj7++
	if yyhl7 {
		yyb7 = yyj7 > l
	} else {
		yyb7 = z.DecCheckBreak()
	}
	if yyb7 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.Challenge = z.DecodeBytesInto(([]byte)(x.Challenge))
	for {
		yyj7++
		if yyhl7 {
			yyb7 = yyj7 > l
		} else {
			yyb7 = z.DecCheckBreak()
		}
		if yyb7 {
			break
		}
		z.DecReadArrayElem()
		z.DecStructFieldNotFound(yyj7-1, "")
	}
}

func (x *InitializationResponse) IsCodecEmpty() bool {
	return !(bool(x.UserFound) || len(x.Challenge) != 0 || false)
}

func (NewUserInitialization) codecSelferViaCodecgen() {}
func (x *NewUserInitialization) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer42
	z, r := codec1978.GenHelper().Encoder(e)
	_, _, _ = h, z, r
	if z.EncBasicHandle().CheckCircularRef {
		z.EncEncode(x)
		return
	}
	if x == nil {
		r.EncodeNil()
	} else {
		yy2arr2 := z.EncBasicHandle().StructToArray
		_ = yy2arr2
		const yyr2 bool = false // struct tag has 'toArray'
		if yyr2 || yy2arr2 {
			z.EncWriteArrayStart(2)
			z.EncWriteArrayElem()
			r.EncodeString(string(x.Email))
			z.EncWriteArrayElem()
			yy6 := &x.Signature
			h.encArray65uint8((*[65]uint8)(yy6), e)
			z.EncWriteArrayEnd()
		} else {
			z.EncWriteMapStart(2)
			if z.EncBasicHandle().Canonical {
				z.EncWriteMapElemKey()
				r.EncodeString(`email`)
				z.EncWriteMapElemValue()
				r.EncodeString(string(x.Email))
				z.EncWriteMapElemKey()
				r.EncodeString(`signature`)
				z.EncWriteMapElemValue()
				yy9 := &x.Signature
				h.encArray65uint8((*[65]uint8)(yy9), e)
			} else {
				z.EncWriteMapElemKey()
				r.EncodeString(`email`)
				z.EncWriteMapElemValue()
				r.EncodeString(string(x.Email))
				z.EncWriteMapElemKey()
				r.EncodeString(`signature`)
				z.EncWriteMapElemValue()
				yy12 := &x.Signature
				h.encArray65uint8((*[65]uint8)(yy12), e)
			}
			z.EncWriteMapEnd()
		}
	}
}

func (x *NewUserInitialization) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer42
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	yyct2 := r.ContainerType()
	if yyct2 == codecSelferValueTypeNil42 {
		*(x) = NewUserInitialization{}
	} else if yyct2 == codecSelferValueTypeMap42 {
		yyl2 := z.DecReadMapStart()
		if yyl2 == 0 {
		} else {
			x.codecDecodeSelfFromMap(yyl2, d)
		}
		z.DecReadMapEnd()
	} else if yyct2 == codecSelferValueTypeArray42 {
		yyl2 := z.DecReadArrayStart()
		if yyl2 != 0 {
			x.codecDecodeSelfFromArray(yyl2, d)
		}
		z.DecReadArrayEnd()
	} else {
		panic(errCodecSelferOnlyMapOrArrayEncodeToStruct42)
	}
}

func (x *NewUserInitialization) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer42
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if z.DecCheckBreak() {
				break
			}
		}
		z.DecReadMapElemKey()
		yys3 := r.DecodeStringAsBytes()
		z.DecReadMapElemValue()
		switch string(yys3) {
		case "email":
			x.Email = (string)(z.DecStringZC(r.DecodeStringAsBytes()))
		case "signature":
			h.decArray65uint8((*[65]uint8)(&x.Signature), d)
		default:
			z.DecStructFieldNotFound(-1, string(yys3))
		} // end switch yys3
	} // end for yyj3
}

func (x *NewUserInitialization) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer42
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	var yyj7 int
	var yyb7 bool
	var yyhl7 bool = l >= 0
	yyj7++
	if yyhl7 {
		yyb7 = yyj7 > l
	} else {
		yyb7 = z.DecCheckBreak()
	}
	if yyb7 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.Email = (string)(z.DecStringZC(r.DecodeStringAsBytes()))
	yyj7++
	if yyhl7 {
		yyb7 = yyj7 > l
	} else {
		yyb7 = z.DecCheckBreak()
	}
	if yyb7 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	h.decArray65uint8((*[65]uint8)(&x.Signature), d)
	for {
		yyj7++
		if yyhl7 {
			yyb7 = yyj7 > l
		} else {
			yyb7 = z.DecCheckBreak()
		}
		if yyb7 {
			break
		}
		z.DecReadArrayElem()
		z.DecStructFieldNotFound(yyj7-1, "")
	}
}

func (x *NewUserInitialization) IsCodecEmpty() bool {
	return !(x.Email != "" || x.Signature != [65]uint8{} || false)
}

func (OrdinaryInitialization) codecSelferViaCodecgen() {}
func (x *OrdinaryInitialization) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer42
	z, r := codec1978.GenHelper().Encoder(e)
	_, _, _ = h, z, r
	if z.EncBasicHandle().CheckCircularRef {
		z.EncEncode(x)
		return
	}
	if x == nil {
		r.EncodeNil()
	} else {
		yy2arr2 := z.EncBasicHandle().StructToArray
		_ = yy2arr2
		const yyr2 bool = false // struct tag has 'toArray'
		if yyr2 || yy2arr2 {
			z.EncWriteArrayStart(1)
			z.EncWriteArrayElem()
			yy4 := &x.Signature
			h.encArray65uint8((*[65]uint8)(yy4), e)
			z.EncWriteArrayEnd()
		} else {
			z.EncWriteMapStart(1)
			if z.EncBasicHandle().Canonical {
				z.EncWriteMapElemKey()
				r.EncodeString(`signature`)
				z.EncWriteMapElemValue()
				yy6 := &x.Signature
				h.encArray65uint8((*[65]uint8)(yy6), e)
			} else {
				z.EncWriteMapElemKey()
				r.EncodeString(`signature`)
				z.EncWriteMapElemValue()
				yy8 := &x.Signature
				h.encArray65uint8((*[65]uint8)(yy8), e)
			}
			z.EncWriteMapEnd()
		}
	}
}

func (x *OrdinaryInitialization) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer42
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	yyct2 := r.ContainerType()
	if yyct2 == codecSelferValueTypeNil42 {
		*(x) = OrdinaryInitialization{}
	} else if yyct2 == codecSelferValueTypeMap42 {
		yyl2 := z.DecReadMapStart()
		if yyl2 == 0 {
		} else {
			x.codecDecodeSelfFromMap(yyl2, d)
		}
		z.DecReadMapEnd()
	} else if yyct2 == codecSelferValueTypeArray42 {
		yyl2 := z.DecReadArrayStart()
		if yyl2 != 0 {
			x.codecDecodeSelfFromArray(yyl2, d)
		}
		z.DecReadArrayEnd()
	} else {
		panic(errCodecSelferOnlyMapOrArrayEncodeToStruct42)
	}
}

func (x *OrdinaryInitialization) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer42
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if z.DecCheckBreak() {
				break
			}
		}
		z.DecReadMapElemKey()
		yys3 := r.DecodeStringAsBytes()
		z.DecReadMapElemValue()
		switch string(yys3) {
		case "signature":
			h.decArray65uint8((*[65]uint8)(&x.Signature), d)
		default:
			z.DecStructFieldNotFound(-1, string(yys3))
		} // end switch yys3
	} // end for yyj3
}

func (x *OrdinaryInitialization) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer42
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	var yyj6 int
	var yyb6 bool
	var yyhl6 bool = l >= 0
	yyj6++
	if yyhl6 {
		yyb6 = yyj6 > l
	} else {
		yyb6 = z.DecCheckBreak()
	}
	if yyb6 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	h.decArray65uint8((*[65]uint8)(&x.Signature), d)
	for {
		yyj6++
		if yyhl6 {
			yyb6 = yyj6 > l
		} else {
			yyb6 = z.DecCheckBreak()
		}
		if yyb6 {
			break
		}
		z.DecReadArrayElem()
		z.DecStructFieldNotFound(yyj6-1, "")
	}
}

func (x *OrdinaryInitialization) IsCodecEmpty() bool {
	return !(x.Signature != [65]uint8{} || false)
}

func (Welcome) codecSelferViaCodecgen() {}
func (x *Welcome) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer42
	z, r := codec1978.GenHelper().Encoder(e)
	_, _, _ = h, z, r
	if z.EncBasicHandle().CheckCircularRef {
		z.EncEncode(x)
		return
	}
	if x == nil {
		r.EncodeNil()
	} else {
		yy2arr2 := z.EncBasicHandle().StructToArray
		_ = yy2arr2
		const yyr2 bool = false // struct tag has 'toArray'
		if yyr2 || yy2arr2 {
			z.EncWriteArrayStart(3)
			z.EncWriteArrayElem()
			r.EncodeBool(bool(x.LoggedIn))
			z.EncWriteArrayElem()
			r.EncodeString(string(x.Message))
			z.EncWriteArrayElem()
			yy8 := &x.User
			if yyxt9 := z.Extension(yy8); yyxt9 != nil {
				z.EncExtension(yy8, yyxt9)
			} else {
				yy8.CodecEncodeSelf(e)
			}
			z.EncWriteArrayEnd()
		} else {
			z.EncWriteMapStart(3)
			if z.EncBasicHandle().Canonical {
				z.EncWriteMapElemKey()
				r.EncodeString(`logged_in`)
				z.EncWriteMapElemValue()
				r.EncodeBool(bool(x.LoggedIn))
				z.EncWriteMapElemKey()
				r.EncodeString(`message`)
				z.EncWriteMapElemValue()
				r.EncodeString(string(x.Message))
				z.EncWriteMapElemKey()
				r.EncodeString(`user`)
				z.EncWriteMapElemValue()
				yy12 := &x.User
				if yyxt13 := z.Extension(yy12); yyxt13 != nil {
					z.EncExtension(yy12, yyxt13)
				} else {
					yy12.CodecEncodeSelf(e)
				}
			} else {
				z.EncWriteMapElemKey()
				r.EncodeString(`logged_in`)
				z.EncWriteMapElemValue()
				r.EncodeBool(bool(x.LoggedIn))
				z.EncWriteMapElemKey()
				r.EncodeString(`message`)
				z.EncWriteMapElemValue()
				r.EncodeString(string(x.Message))
				z.EncWriteMapElemKey()
				r.EncodeString(`user`)
				z.EncWriteMapElemValue()
				yy16 := &x.User
				if yyxt17 := z.Extension(yy16); yyxt17 != nil {
					z.EncExtension(yy16, yyxt17)
				} else {
					yy16.CodecEncodeSelf(e)
				}
			}
			z.EncWriteMapEnd()
		}
	}
}

func (x *Welcome) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer42
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	yyct2 := r.ContainerType()
	if yyct2 == codecSelferValueTypeNil42 {
		*(x) = Welcome{}
	} else if yyct2 == codecSelferValueTypeMap42 {
		yyl2 := z.DecReadMapStart()
		if yyl2 == 0 {
		} else {
			x.codecDecodeSelfFromMap(yyl2, d)
		}
		z.DecReadMapEnd()
	} else if yyct2 == codecSelferValueTypeArray42 {
		yyl2 := z.DecReadArrayStart()
		if yyl2 != 0 {
			x.codecDecodeSelfFromArray(yyl2, d)
		}
		z.DecReadArrayEnd()
	} else {
		panic(errCodecSelferOnlyMapOrArrayEncodeToStruct42)
	}
}

func (x *Welcome) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer42
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if z.DecCheckBreak() {
				break
			}
		}
		z.DecReadMapElemKey()
		yys3 := r.DecodeStringAsBytes()
		z.DecReadMapElemValue()
		switch string(yys3) {
		case "logged_in":
			x.LoggedIn = (bool)(r.DecodeBool())
		case "message":
			x.Message = (string)(z.DecStringZC(r.DecodeStringAsBytes()))
		case "user":
			if yyxt7 := z.Extension(x.User); yyxt7 != nil {
				z.DecExtension(&x.User, yyxt7)
			} else {
				x.User.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, string(yys3))
		} // end switch yys3
	} // end for yyj3
}

func (x *Welcome) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer42
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	var yyj8 int
	var yyb8 bool
	var yyhl8 bool = l >= 0
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = z.DecCheckBreak()
	}
	if yyb8 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.LoggedIn = (bool)(r.DecodeBool())
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = z.DecCheckBreak()
	}
	if yyb8 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.Message = (string)(z.DecStringZC(r.DecodeStringAsBytes()))
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = z.DecCheckBreak()
	}
	if yyb8 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if yyxt12 := z.Extension(x.User); yyxt12 != nil {
		z.DecExtension(&x.User, yyxt12)
	} else {
		x.User.CodecDecodeSelf(d)
	}
	for {
		yyj8++
		if yyhl8 {
			yyb8 = yyj8 > l
		} else {
			yyb8 = z.DecCheckBreak()
		}
		if yyb8 {
			break
		}
		z.DecReadArrayElem()
		z.DecStructFieldNotFound(yyj8-1, "")
	}
}

func (x *Welcome) IsCodecEmpty() bool {
	return !(bool(x.LoggedIn) || x.Message != "" || !(x.User.IsCodecEmpty()) || false)
}

func (ListFeedsRequest) codecSelferViaCodecgen() {}
func (x *ListFeedsRequest) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer42
	z, r := codec1978.GenHelper().Encoder(e)
	_, _, _ = h, z, r
	if z.EncBasicHandle().CheckCircularRef {
		z.EncEncode(x)
		return
	}
	if x == nil {
		r.EncodeNil()
	} else {
		yy2arr2 := z.EncBasicHandle().StructToArray
		_ = yy2arr2
		const yyr2 bool = false // struct tag has 'toArray'
		if yyr2 || yy2arr2 {
			z.EncWriteArrayStart(1)
			z.EncWriteArrayElem()
			r.EncodeUint(uint64(x.Sort))
			z.EncWriteArrayEnd()
		} else {
			z.EncWriteMapStart(1)
			if z.EncBasicHandle().Canonical {
				z.EncWriteMapElemKey()
				r.EncodeString(`sort`)
				z.EncWriteMapElemValue()
				r.EncodeUint(uint64(x.Sort))
			} else {
				z.EncWriteMapElemKey()
				r.EncodeString(`sort`)
				z.EncWriteMapElemValue()
				r.EncodeUint(uint64(x.Sort))
			}
			z.EncWriteMapEnd()
		}
	}
}

func (x *ListFeedsRequest) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer42
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	yyct2 := r.ContainerType()
	if yyct2 == codecSelferValueTypeNil42 {
		*(x) = ListFeedsRequest{}
	} else if yyct2 == codecSelferValueTypeMap42 {
		yyl2 := z.DecReadMapStart()
		if yyl2 == 0 {
		} else {
			x.codecDecodeSelfFromMap(yyl2, d)
		}
		z.DecReadMapEnd()
	} else if yyct2 == codecSelferValueTypeArray42 {
		yyl2 := z.DecReadArrayStart()
		if yyl2 != 0 {
			x.codecDecodeSelfFromArray(yyl2, d)
		}
		z.DecReadArrayEnd()
	} else {
		panic(errCodecSelferOnlyMapOrArrayEncodeToStruct42)
	}
}

func (x *ListFeedsRequest) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer42
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if z.DecCheckBreak() {
				break
			}
		}
		z.DecReadMapElemKey()
		yys3 := r.DecodeStringAsBytes()
		z.DecReadMapElemValue()
		switch string(yys3) {
		case "sort":
			x.Sort = (uint8)(z.C.UintV(r.DecodeUint64(), 8))
		default:
			z.DecStructFieldNotFound(-1, string(yys3))
		} // end switch yys3
	} // end for yyj3
}

func (x *ListFeedsRequest) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer42
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	var yyj5 int
	var yyb5 bool
	var yyhl5 bool = l >= 0
	yyj5++
	if yyhl5 {
		yyb5 = yyj5 > l
	} else {
		yyb5 = z.DecCheckBreak()
	}
	if yyb5 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.Sort = (uint8)(z.C.UintV(r.DecodeUint64(), 8))
	for {
		yyj5++
		if yyhl5 {
			yyb5 = yyj5 > l
		} else {
			yyb5 = z.DecCheckBreak()
		}
		if yyb5 {
			break
		}
		z.DecReadArrayElem()
		z.DecStructFieldNotFound(yyj5-1, "")
	}
}

func (x *ListFeedsRequest) IsCodecEmpty() bool {
	return !(x.Sort != 0 || false)
}

func (ListFeedsResponse) codecSelferViaCodecgen() {}
func (x *ListFeedsResponse) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer42
	z, r := codec1978.GenHelper().Encoder(e)
	_, _, _ = h, z, r
	if z.EncBasicHandle().CheckCircularRef {
		z.EncEncode(x)
		return
	}
	if x == nil {
		r.EncodeNil()
	} else {
		yy2arr2 := z.EncBasicHandle().StructToArray
		_ = yy2arr2
		const yyr2 bool = false // struct tag has 'toArray'
		if yyr2 || yy2arr2 {
			z.EncWriteArrayStart(2)
			z.EncWriteArrayElem()
			r.EncodeUint(uint64(x.Count))
			z.EncWriteArrayElem()
			if x.Feeds == nil {
				r.EncodeNil()
			} else {
				h.encSliceFeed(([]Feed)(x.Feeds), e)
			} // end block: if x.Feeds slice == nil
			z.EncWriteArrayEnd()
		} else {
			z.EncWriteMapStart(2)
			if z.EncBasicHandle().Canonical {
				z.EncWriteMapElemKey()
				r.EncodeString(`count`)
				z.EncWriteMapElemValue()
				r.EncodeUint(uint64(x.Count))
				z.EncWriteMapElemKey()
				r.EncodeString(`feeds`)
				z.EncWriteMapElemValue()
				if x.Feeds == nil {
					r.EncodeNil()
				} else {
					h.encSliceFeed(([]Feed)(x.Feeds), e)
				} // end block: if x.Feeds slice == nil
			} else {
				z.EncWriteMapElemKey()
				r.EncodeString(`count`)
				z.EncWriteMapElemValue()
				r.EncodeUint(uint64(x.Count))
				z.EncWriteMapElemKey()
				r.EncodeString(`feeds`)
				z.EncWriteMapElemValue()
				if x.Feeds == nil {
					r.EncodeNil()
				} else {
					h.encSliceFeed(([]Feed)(x.Feeds), e)
				} // end block: if x.Feeds slice == nil
			}
			z.EncWriteMapEnd()
		}
	}
}

func (x *ListFeedsResponse) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer42
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	yyct2 := r.ContainerType()
	if yyct2 == codecSelferValueTypeNil42 {
		*(x) = ListFeedsResponse{}
	} else if yyct2 == codecSelferValueTypeMap42 {
		yyl2 := z.DecReadMapStart()
		if yyl2 == 0 {
		} else {
			x.codecDecodeSelfFromMap(yyl2, d)
		}
		z.DecReadMapEnd()
	} else if yyct2 == codecSelferValueTypeArray42 {
		yyl2 := z.DecReadArrayStart()
		if yyl2 != 0 {
			x.codecDecodeSelfFromArray(yyl2, d)
		}
		z.DecReadArrayEnd()
	} else {
		panic(errCodecSelferOnlyMapOrArrayEncodeToStruct42)
	}
}

func (x *ListFeedsResponse) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer42
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if z.DecCheckBreak() {
				break
			}
		}
		z.DecReadMapElemKey()
		yys3 := r.DecodeStringAsBytes()
		z.DecReadMapElemValue()
		switch string(yys3) {
		case "count":
			x.Count = (uint64)(r.DecodeUint64())
		case "feeds":
			h.decSliceFeed((*[]Feed)(&x.Feeds), d)
		default:
			z.DecStructFieldNotFound(-1, string(yys3))
		} // end switch yys3
	} // end for yyj3
}

func (x *ListFeedsResponse) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer42
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	var yyj7 int
	var yyb7 bool
	var yyhl7 bool = l >= 0
	yyj7++
	if yyhl7 {
		yyb7 = yyj7 > l
	} else {
		yyb7 = z.DecCheckBreak()
	}
	if yyb7 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.Count = (uint64)(r.DecodeUint64())
	yyj7++
	if yyhl7 {
		yyb7 = yyj7 > l
	} else {
		yyb7 = z.DecCheckBreak()
	}
	if yyb7 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	h.decSliceFeed((*[]Feed)(&x.Feeds), d)
	for {
		yyj7++
		if yyhl7 {
			yyb7 = yyj7 > l
		} else {
			yyb7 = z.DecCheckBreak()
		}
		if yyb7 {
			break
		}
		z.DecReadArrayElem()
		z.DecStructFieldNotFound(yyj7-1, "")
	}
}

func (x *ListFeedsResponse) IsCodecEmpty() bool {
	return !(x.Count != 0 || len(x.Feeds) != 0 || false)
}

func (DeleteFeedRequest) codecSelferViaCodecgen() {}
func (x *DeleteFeedRequest) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer42
	z, r := codec1978.GenHelper().Encoder(e)
	_, _, _ = h, z, r
	if z.EncBasicHandle().CheckCircularRef {
		z.EncEncode(x)
		return
	}
	if x == nil {
		r.EncodeNil()
	} else {
		yy2arr2 := z.EncBasicHandle().StructToArray
		_ = yy2arr2
		const yyr2 bool = false // struct tag has 'toArray'
		if yyr2 || yy2arr2 {
			z.EncWriteArrayStart(1)
			z.EncWriteArrayElem()
			yy4 := &x.ID
			if yyxt5 := z.Extension(yy4); yyxt5 != nil {
				z.EncExtension(yy4, yyxt5)
			} else if !z.EncBinary() && z.IsJSONHandle() {
				z.EncJSONMarshal(*yy4)
			} else {
				z.F.EncSliceUint8V(([]uint8)(yy4[:]), e)
			}
			z.EncWriteArrayEnd()
		} else {
			z.EncWriteMapStart(1)
			if z.EncBasicHandle().Canonical {
				z.EncWriteMapElemKey()
				r.EncodeString(`id`)
				z.EncWriteMapElemValue()
				yy6 := &x.ID
				if yyxt7 := z.Extension(yy6); yyxt7 != nil {
					z.EncExtension(yy6, yyxt7)
				} else if !z.EncBinary() && z.IsJSONHandle() {
					z.EncJSONMarshal(*yy6)
				} else {
					z.F.EncSliceUint8V(([]uint8)(yy6[:]), e)
				}
			} else {
				z.EncWriteMapElemKey()
				r.EncodeString(`id`)
				z.EncWriteMapElemValue()
				yy8 := &x.ID
				if yyxt9 := z.Extension(yy8); yyxt9 != nil {
					z.EncExtension(yy8, yyxt9)
				} else if !z.EncBinary() && z.IsJSONHandle() {
					z.EncJSONMarshal(*yy8)
				} else {
					z.F.EncSliceUint8V(([]uint8)(yy8[:]), e)
				}
			}
			z.EncWriteMapEnd()
		}
	}
}

func (x *DeleteFeedRequest) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer42
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	yyct2 := r.ContainerType()
	if yyct2 == codecSelferValueTypeNil42 {
		*(x) = DeleteFeedRequest{}
	} else if yyct2 == codecSelferValueTypeMap42 {
		yyl2 := z.DecReadMapStart()
		if yyl2 == 0 {
		} else {
			x.codecDecodeSelfFromMap(yyl2, d)
		}
		z.DecReadMapEnd()
	} else if yyct2 == codecSelferValueTypeArray42 {
		yyl2 := z.DecReadArrayStart()
		if yyl2 != 0 {
			x.codecDecodeSelfFromArray(yyl2, d)
		}
		z.DecReadArrayEnd()
	} else {
		panic(errCodecSelferOnlyMapOrArrayEncodeToStruct42)
	}
}

func (x *DeleteFeedRequest) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer42
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if z.DecCheckBreak() {
				break
			}
		}
		z.DecReadMapElemKey()
		yys3 := r.DecodeStringAsBytes()
		z.DecReadMapElemValue()
		switch string(yys3) {
		case "id":
			if yyxt5 := z.Extension(x.ID); yyxt5 != nil {
				z.DecExtension(&x.ID, yyxt5)
			} else if !z.DecBinary() && z.IsJSONHandle() {
				z.DecJSONUnmarshal(&x.ID)
			} else {
				z.F.DecSliceUint8N(([]uint8)(x.ID[:]), d)
			}
		default:
			z.DecStructFieldNotFound(-1, string(yys3))
		} // end switch yys3
	} // end for yyj3
}

func (x *DeleteFeedRequest) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer42
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	var yyj6 int
	var yyb6 bool
	var yyhl6 bool = l >= 0
	yyj6++
	if yyhl6 {
		yyb6 = yyj6 > l
	} else {
		yyb6 = z.DecCheckBreak()
	}
	if yyb6 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if yyxt8 := z.Extension(x.ID); yyxt8 != nil {
		z.DecExtension(&x.ID, yyxt8)
	} else if !z.DecBinary() && z.IsJSONHandle() {
		z.DecJSONUnmarshal(&x.ID)
	} else {
		z.F.DecSliceUint8N(([]uint8)(x.ID[:]), d)
	}
	for {
		yyj6++
		if yyhl6 {
			yyb6 = yyj6 > l
		} else {
			yyb6 = z.DecCheckBreak()
		}
		if yyb6 {
			break
		}
		z.DecReadArrayElem()
		z.DecStructFieldNotFound(yyj6-1, "")
	}
}

func (x *DeleteFeedRequest) IsCodecEmpty() bool {
	return !(x.ID != pkg1_primitive.ObjectID{} || false)
}

func (DeleteFeedResponse) codecSelferViaCodecgen() {}
func (x *DeleteFeedResponse) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer42
	z, r := codec1978.GenHelper().Encoder(e)
	_, _, _ = h, z, r
	if z.EncBasicHandle().CheckCircularRef {
		z.EncEncode(x)
		return
	}
	if x == nil {
		r.EncodeNil()
	} else {
		yy2arr2 := z.EncBasicHandle().StructToArray
		_ = yy2arr2
		const yyr2 bool = false // struct tag has 'toArray'
		if yyr2 || yy2arr2 {
			z.EncWriteArrayStart(1)
			z.EncWriteArrayElem()
			r.EncodeInt(int64(x.DeletedCount))
			z.EncWriteArrayEnd()
		} else {
			z.EncWriteMapStart(1)
			if z.EncBasicHandle().Canonical {
				z.EncWriteMapElemKey()
				r.EncodeString(`deleted_count`)
				z.EncWriteMapElemValue()
				r.EncodeInt(int64(x.DeletedCount))
			} else {
				z.EncWriteMapElemKey()
				r.EncodeString(`deleted_count`)
				z.EncWriteMapElemValue()
				r.EncodeInt(int64(x.DeletedCount))
			}
			z.EncWriteMapEnd()
		}
	}
}

func (x *DeleteFeedResponse) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer42
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	yyct2 := r.ContainerType()
	if yyct2 == codecSelferValueTypeNil42 {
		*(x) = DeleteFeedResponse{}
	} else if yyct2 == codecSelferValueTypeMap42 {
		yyl2 := z.DecReadMapStart()
		if yyl2 == 0 {
		} else {
			x.codecDecodeSelfFromMap(yyl2, d)
		}
		z.DecReadMapEnd()
	} else if yyct2 == codecSelferValueTypeArray42 {
		yyl2 := z.DecReadArrayStart()
		if yyl2 != 0 {
			x.codecDecodeSelfFromArray(yyl2, d)
		}
		z.DecReadArrayEnd()
	} else {
		panic(errCodecSelferOnlyMapOrArrayEncodeToStruct42)
	}
}

func (x *DeleteFeedResponse) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer42
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if z.DecCheckBreak() {
				break
			}
		}
		z.DecReadMapElemKey()
		yys3 := r.DecodeStringAsBytes()
		z.DecReadMapElemValue()
		switch string(yys3) {
		case "deleted_count":
			x.DeletedCount = (int64)(r.DecodeInt64())
		default:
			z.DecStructFieldNotFound(-1, string(yys3))
		} // end switch yys3
	} // end for yyj3
}

func (x *DeleteFeedResponse) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer42
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	var yyj5 int
	var yyb5 bool
	var yyhl5 bool = l >= 0
	yyj5++
	if yyhl5 {
		yyb5 = yyj5 > l
	} else {
		yyb5 = z.DecCheckBreak()
	}
	if yyb5 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.DeletedCount = (int64)(r.DecodeInt64())
	for {
		yyj5++
		if yyhl5 {
			yyb5 = yyj5 > l
		} else {
			yyb5 = z.DecCheckBreak()
		}
		if yyb5 {
			break
		}
		z.DecReadArrayElem()
		z.DecStructFieldNotFound(yyj5-1, "")
	}
}

func (x *DeleteFeedResponse) IsCodecEmpty() bool {
	return !(x.DeletedCount != 0 || false)
}

func (GenericIDResponse) codecSelferViaCodecgen() {}
func (x *GenericIDResponse) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer42
	z, r := codec1978.GenHelper().Encoder(e)
	_, _, _ = h, z, r
	if z.EncBasicHandle().CheckCircularRef {
		z.EncEncode(x)
		return
	}
	if x == nil {
		r.EncodeNil()
	} else {
		yy2arr2 := z.EncBasicHandle().StructToArray
		_ = yy2arr2
		const yyr2 bool = false // struct tag has 'toArray'
		if yyr2 || yy2arr2 {
			z.EncWriteArrayStart(2)
			z.EncWriteArrayElem()
			r.EncodeBool(bool(x.OK))
			z.EncWriteArrayElem()
			yy6 := &x.ID
			if yyxt7 := z.Extension(yy6); yyxt7 != nil {
				z.EncExtension(yy6, yyxt7)
			} else if !z.EncBinary() && z.IsJSONHandle() {
				z.EncJSONMarshal(*yy6)
			} else {
				z.F.EncSliceUint8V(([]uint8)(yy6[:]), e)
			}
			z.EncWriteArrayEnd()
		} else {
			z.EncWriteMapStart(2)
			if z.EncBasicHandle().Canonical {
				z.EncWriteMapElemKey()
				r.EncodeString(`id`)
				z.EncWriteMapElemValue()
				yy8 := &x.ID
				if yyxt9 := z.Extension(yy8); yyxt9 != nil {
					z.EncExtension(yy8, yyxt9)
				} else if !z.EncBinary() && z.IsJSONHandle() {
					z.EncJSONMarshal(*yy8)
				} else {
					z.F.EncSliceUint8V(([]uint8)(yy8[:]), e)
				}
				z.EncWriteMapElemKey()
				r.EncodeString(`ok`)
				z.EncWriteMapElemValue()
				r.EncodeBool(bool(x.OK))
			} else {
				z.EncWriteMapElemKey()
				r.EncodeString(`ok`)
				z.EncWriteMapElemValue()
				r.EncodeBool(bool(x.OK))
				z.EncWriteMapElemKey()
				r.EncodeString(`id`)
				z.EncWriteMapElemValue()
				yy12 := &x.ID
				if yyxt13 := z.Extension(yy12); yyxt13 != nil {
					z.EncExtension(yy12, yyxt13)
				} else if !z.EncBinary() && z.IsJSONHandle() {
					z.EncJSONMarshal(*yy12)
				} else {
					z.F.EncSliceUint8V(([]uint8)(yy12[:]), e)
				}
			}
			z.EncWriteMapEnd()
		}
	}
}

func (x *GenericIDResponse) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer42
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	yyct2 := r.ContainerType()
	if yyct2 == codecSelferValueTypeNil42 {
		*(x) = GenericIDResponse{}
	} else if yyct2 == codecSelferValueTypeMap42 {
		yyl2 := z.DecReadMapStart()
		if yyl2 == 0 {
		} else {
			x.codecDecodeSelfFromMap(yyl2, d)
		}
		z.DecReadMapEnd()
	} else if yyct2 == codecSelferValueTypeArray42 {
		yyl2 := z.DecReadArrayStart()
		if yyl2 != 0 {
			x.codecDecodeSelfFromArray(yyl2, d)
		}
		z.DecReadArrayEnd()
	} else {
		panic(errCodecSelferOnlyMapOrArrayEncodeToStruct42)
	}
}

func (x *GenericIDResponse) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer42
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if z.DecCheckBreak() {
				break
			}
		}
		z.DecReadMapElemKey()
		yys3 := r.DecodeStringAsBytes()
		z.DecReadMapElemValue()
		switch string(yys3) {
		case "ok":
			x.OK = (bool)(r.DecodeBool())
		case "id":
			if yyxt6 := z.Extension(x.ID); yyxt6 != nil {
				z.DecExtension(&x.ID, yyxt6)
			} else if !z.DecBinary() && z.IsJSONHandle() {
				z.DecJSONUnmarshal(&x.ID)
			} else {
				z.F.DecSliceUint8N(([]uint8)(x.ID[:]), d)
			}
		default:
			z.DecStructFieldNotFound(-1, string(yys3))
		} // end switch yys3
	} // end for yyj3
}

func (x *GenericIDResponse) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer42
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	var yyj7 int
	var yyb7 bool
	var yyhl7 bool = l >= 0
	yyj7++
	if yyhl7 {
		yyb7 = yyj7 > l
	} else {
		yyb7 = z.DecCheckBreak()
	}
	if yyb7 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.OK = (bool)(r.DecodeBool())
	yyj7++
	if yyhl7 {
		yyb7 = yyj7 > l
	} else {
		yyb7 = z.DecCheckBreak()
	}
	if yyb7 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if yyxt10 := z.Extension(x.ID); yyxt10 != nil {
		z.DecExtension(&x.ID, yyxt10)
	} else if !z.DecBinary() && z.IsJSONHandle() {
		z.DecJSONUnmarshal(&x.ID)
	} else {
		z.F.DecSliceUint8N(([]uint8)(x.ID[:]), d)
	}
	for {
		yyj7++
		if yyhl7 {
			yyb7 = yyj7 > l
		} else {
			yyb7 = z.DecCheckBreak()
		}
		if yyb7 {
			break
		}
		z.DecReadArrayElem()
		z.DecStructFieldNotFound(yyj7-1, "")
	}
}

func (x *GenericIDResponse) IsCodecEmpty() bool {
	return !(bool(x.OK) || x.ID != pkg1_primitive.ObjectID{} || false)
}

func (UpdatedFeedResponse) codecSelferViaCodecgen() {}
func (x *UpdatedFeedResponse) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer42
	z, r := codec1978.GenHelper().Encoder(e)
	_, _, _ = h, z, r
	if z.EncBasicHandle().CheckCircularRef {
		z.EncEncode(x)
		return
	}
	if x == nil {
		r.EncodeNil()
	} else {
		yy2arr2 := z.EncBasicHandle().StructToArray
		_ = yy2arr2
		const yyr2 bool = false // struct tag has 'toArray'
		if yyr2 || yy2arr2 {
			z.EncWriteArrayStart(1)
			z.EncWriteArrayElem()
			r.EncodeUint(uint64(x.ModifiedCount))
			z.EncWriteArrayEnd()
		} else {
			z.EncWriteMapStart(1)
			if z.EncBasicHandle().Canonical {
				z.EncWriteMapElemKey()
				r.EncodeString(`modified_count`)
				z.EncWriteMapElemValue()
				r.EncodeUint(uint64(x.ModifiedCount))
			} else {
				z.EncWriteMapElemKey()
				r.EncodeString(`modified_count`)
				z.EncWriteMapElemValue()
				r.EncodeUint(uint64(x.ModifiedCount))
			}
			z.EncWriteMapEnd()
		}
	}
}

func (x *UpdatedFeedResponse) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer42
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	yyct2 := r.ContainerType()
	if yyct2 == codecSelferValueTypeNil42 {
		*(x) = UpdatedFeedResponse{}
	} else if yyct2 == codecSelferValueTypeMap42 {
		yyl2 := z.DecReadMapStart()
		if yyl2 == 0 {
		} else {
			x.codecDecodeSelfFromMap(yyl2, d)
		}
		z.DecReadMapEnd()
	} else if yyct2 == codecSelferValueTypeArray42 {
		yyl2 := z.DecReadArrayStart()
		if yyl2 != 0 {
			x.codecDecodeSelfFromArray(yyl2, d)
		}
		z.DecReadArrayEnd()
	} else {
		panic(errCodecSelferOnlyMapOrArrayEncodeToStruct42)
	}
}

func (x *UpdatedFeedResponse) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer42
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if z.DecCheckBreak() {
				break
			}
		}
		z.DecReadMapElemKey()
		yys3 := r.DecodeStringAsBytes()
		z.DecReadMapElemValue()
		switch string(yys3) {
		case "modified_count":
			x.ModifiedCount = (uint64)(r.DecodeUint64())
		default:
			z.DecStructFieldNotFound(-1, string(yys3))
		} // end switch yys3
	} // end for yyj3
}

func (x *UpdatedFeedResponse) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer42
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	var yyj5 int
	var yyb5 bool
	var yyhl5 bool = l >= 0
	yyj5++
	if yyhl5 {
		yyb5 = yyj5 > l
	} else {
		yyb5 = z.DecCheckBreak()
	}
	if yyb5 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.ModifiedCount = (uint64)(r.DecodeUint64())
	for {
		yyj5++
		if yyhl5 {
			yyb5 = yyj5 > l
		} else {
			yyb5 = z.DecCheckBreak()
		}
		if yyb5 {
			break
		}
		z.DecReadArrayElem()
		z.DecStructFieldNotFound(yyj5-1, "")
	}
}

func (x *UpdatedFeedResponse) IsCodecEmpty() bool {
	return !(x.ModifiedCount != 0 || false)
}

func (VerifyEmailRequest) codecSelferViaCodecgen() {}
func (x *VerifyEmailRequest) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer42
	z, r := codec1978.GenHelper().Encoder(e)
	_, _, _ = h, z, r
	if z.EncBasicHandle().CheckCircularRef {
		z.EncEncode(x)
		return
	}
	if x == nil {
		r.EncodeNil()
	} else {
		yy2arr2 := z.EncBasicHandle().StructToArray
		_ = yy2arr2
		const yyr2 bool = false // struct tag has 'toArray'
		if yyr2 || yy2arr2 {
			z.EncWriteArrayStart(1)
			z.EncWriteArrayElem()
			yy4 := &x.Token
			h.encArray32uint8((*[32]uint8)(yy4), e)
			z.EncWriteArrayEnd()
		} else {
			z.EncWriteMapStart(1)
			if z.EncBasicHandle().Canonical {
				z.EncWriteMapElemKey()
				r.EncodeString(`token`)
				z.EncWriteMapElemValue()
				yy6 := &x.Token
				h.encArray32uint8((*[32]uint8)(yy6), e)
			} else {
				z.EncWriteMapElemKey()
				r.EncodeString(`token`)
				z.EncWriteMapElemValue()
				yy8 := &x.Token
				h.encArray32uint8((*[32]uint8)(yy8), e)
			}
			z.EncWriteMapEnd()
		}
	}
}

func (x *VerifyEmailRequest) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer42
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	yyct2 := r.ContainerType()
	if yyct2 == codecSelferValueTypeNil42 {
		*(x) = VerifyEmailRequest{}
	} else if yyct2 == codecSelferValueTypeMap42 {
		yyl2 := z.DecReadMapStart()
		if yyl2 == 0 {
		} else {
			x.codecDecodeSelfFromMap(yyl2, d)
		}
		z.DecReadMapEnd()
	} else if yyct2 == codecSelferValueTypeArray42 {
		yyl2 := z.DecReadArrayStart()
		if yyl2 != 0 {
			x.codecDecodeSelfFromArray(yyl2, d)
		}
		z.DecReadArrayEnd()
	} else {
		panic(errCodecSelferOnlyMapOrArrayEncodeToStruct42)
	}
}

func (x *VerifyEmailRequest) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer42
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if z.DecCheckBreak() {
				break
			}
		}
		z.DecReadMapElemKey()
		yys3 := r.DecodeStringAsBytes()
		z.DecReadMapElemValue()
		switch string(yys3) {
		case "token":
			h.decArray32uint8((*[32]uint8)(&x.Token), d)
		default:
			z.DecStructFieldNotFound(-1, string(yys3))
		} // end switch yys3
	} // end for yyj3
}

func (x *VerifyEmailRequest) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer42
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	var yyj6 int
	var yyb6 bool
	var yyhl6 bool = l >= 0
	yyj6++
	if yyhl6 {
		yyb6 = yyj6 > l
	} else {
		yyb6 = z.DecCheckBreak()
	}
	if yyb6 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	h.decArray32uint8((*[32]uint8)(&x.Token), d)
	for {
		yyj6++
		if yyhl6 {
			yyb6 = yyj6 > l
		} else {
			yyb6 = z.DecCheckBreak()
		}
		if yyb6 {
			break
		}
		z.DecReadArrayElem()
		z.DecStructFieldNotFound(yyj6-1, "")
	}
}

func (x *VerifyEmailRequest) IsCodecEmpty() bool {
	return !(x.Token != [32]uint8{} || false)
}

func (x codecSelfer42) encArray20uint8(v *[20]uint8, e *codec1978.Encoder) {
	var h codecSelfer42
	z, r := codec1978.GenHelper().Encoder(e)
	_, _, _ = h, z, r
	if v == nil {
		r.EncodeNil()
		return
	}
	r.EncodeStringBytesRaw(((*[20]byte)(v))[:])
}

func (x codecSelfer42) decArray20uint8(v *[20]uint8, d *codec1978.Decoder) {
	var h codecSelfer42
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	r.DecodeBytes(((*[20]byte)(v))[:])
}

func (x codecSelfer42) encArray32uint8(v *[32]uint8, e *codec1978.Encoder) {
	var h codecSelfer42
	z, r := codec1978.GenHelper().Encoder(e)
	_, _, _ = h, z, r
	if v == nil {
		r.EncodeNil()
		return
	}
	r.EncodeStringBytesRaw(((*[32]byte)(v))[:])
}

func (x codecSelfer42) decArray32uint8(v *[32]uint8, d *codec1978.Decoder) {
	var h codecSelfer42
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	r.DecodeBytes(((*[32]byte)(v))[:])
}

func (x codecSelfer42) encArray65uint8(v *[65]uint8, e *codec1978.Encoder) {
	var h codecSelfer42
	z, r := codec1978.GenHelper().Encoder(e)
	_, _, _ = h, z, r
	if v == nil {
		r.EncodeNil()
		return
	}
	r.EncodeStringBytesRaw(((*[65]byte)(v))[:])
}

func (x codecSelfer42) decArray65uint8(v *[65]uint8, d *codec1978.Decoder) {
	var h codecSelfer42
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	r.DecodeBytes(((*[65]byte)(v))[:])
}

func (x codecSelfer42) encSliceFeed(v []Feed, e *codec1978.Encoder) {
	var h codecSelfer42
	z, r := codec1978.GenHelper().Encoder(e)
	_, _, _ = h, z, r
	if v == nil {
		r.EncodeNil()
		return
	}
	z.EncWriteArrayStart(len(v))
	for yyv1 := range v {
		z.EncWriteArrayElem()
		yy2 := &v[yyv1]
		if yyxt3 := z.Extension(yy2); yyxt3 != nil {
			z.EncExtension(yy2, yyxt3)
		} else {
			yy2.CodecEncodeSelf(e)
		}
	}
	z.EncWriteArrayEnd()
}

func (x codecSelfer42) decSliceFeed(v *[]Feed, d *codec1978.Decoder) {
	var h codecSelfer42
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyh1.IsNil {
		if yyv1 != nil {
			yyv1 = nil
			yyc1 = true
		}
	} else if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []Feed{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else {
		yyhl1 := yyl1 > 0
		var yyrl1 int
		_ = yyrl1
		if yyhl1 {
			if yyl1 > cap(yyv1) {
				yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 136)
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]Feed, yyrl1)
				}
				yyc1 = true
			} else if yyl1 != len(yyv1) {
				yyv1 = yyv1[:yyl1]
				yyc1 = true
			}
		}
		var yyj1 int
		for yyj1 = 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || z.DecCheckBreak()); yyj1++ { // bounds-check-elimination
			if yyj1 == 0 && yyv1 == nil {
				if yyhl1 {
					yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 136)
				} else {
					yyrl1 = 8
				}
				yyv1 = make([]Feed, yyrl1)
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)
			var yydb1 bool
			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, Feed{})
				yyc1 = true
			}
			if yydb1 {
				z.DecSwallow()
			} else {
				if yyxt3 := z.Extension(yyv1[yyj1]); yyxt3 != nil {
					z.DecExtension(&yyv1[yyj1], yyxt3)
				} else {
					yyv1[yyj1].CodecDecodeSelf(d)
				}
			}
		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = []Feed{}
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}
