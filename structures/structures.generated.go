//go:build go1.6
// +build go1.6

// Code generated by codecgen - DO NOT EDIT.

package structures

import (
	"errors"
	codec1978 "github.com/ugorji/go/codec"
	pkg1_primitive "go.mongodb.org/mongo-driver/bson/primitive"
	"runtime"
	"sort"
	"strconv"
	"time"
)

const (
	// ----- content types ----
	codecSelferCcUTF842 = 1
	codecSelferCcRAW42  = 255
	// ----- value types used ----
	codecSelferValueTypeArray42     = 10
	codecSelferValueTypeMap42       = 9
	codecSelferValueTypeString42    = 6
	codecSelferValueTypeInt42       = 2
	codecSelferValueTypeUint42      = 3
	codecSelferValueTypeFloat42     = 4
	codecSelferValueTypeNil42       = 1
	codecSelferBitsize42            = uint8(32 << (^uint(0) >> 63))
	codecSelferDecContainerLenNil42 = -2147483648
)

var (
	errCodecSelferOnlyMapOrArrayEncodeToStruct42                = errors.New(`only encoded map or array can be decoded into a struct`)
	_                                            sort.Interface = nil
)

type codecSelfer42 struct{}

func codecSelfer42False() bool { return false }
func codecSelfer42True() bool  { return true }

type codecSelfer42stringSlice []string

func (p codecSelfer42stringSlice) Len() int           { return len(p) }
func (p codecSelfer42stringSlice) Swap(i, j int)      { p[uint(i)], p[uint(j)] = p[uint(j)], p[uint(i)] }
func (p codecSelfer42stringSlice) Less(i, j int) bool { return p[uint(i)] < p[uint(j)] }

type codecSelfer42uint64Slice []uint64

func (p codecSelfer42uint64Slice) Len() int           { return len(p) }
func (p codecSelfer42uint64Slice) Swap(i, j int)      { p[uint(i)], p[uint(j)] = p[uint(j)], p[uint(i)] }
func (p codecSelfer42uint64Slice) Less(i, j int) bool { return p[uint(i)] < p[uint(j)] }

type codecSelfer42int64Slice []int64

func (p codecSelfer42int64Slice) Len() int           { return len(p) }
func (p codecSelfer42int64Slice) Swap(i, j int)      { p[uint(i)], p[uint(j)] = p[uint(j)], p[uint(i)] }
func (p codecSelfer42int64Slice) Less(i, j int) bool { return p[uint(i)] < p[uint(j)] }

type codecSelfer42float64Slice []float64

func (p codecSelfer42float64Slice) Len() int           { return len(p) }
func (p codecSelfer42float64Slice) Swap(i, j int)      { p[uint(i)], p[uint(j)] = p[uint(j)], p[uint(i)] }
func (p codecSelfer42float64Slice) Less(i, j int) bool { return p[uint(i)] < p[uint(j)] }

func init() {
	if codec1978.GenVersion != 25 {
		_, file, _, _ := runtime.Caller(0)
		ver := strconv.FormatInt(int64(codec1978.GenVersion), 10)
		panic(errors.New("codecgen version mismatch: current: 25, need " + ver + ". Re-generate file: " + file))
	}
	if false { // reference the types, but skip this branch at build/run time
		var _ pkg1_primitive.ObjectID
		var _ time.Time
	}
}

func (User) codecSelferViaCodecgen() {}
func (x *User) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer42
	z, r := codec1978.GenHelper().Encoder(e)
	_, _, _ = h, z, r
	if z.EncBasicHandle().CheckCircularRef {
		z.EncEncode(x)
		return
	}
	if x == nil {
		r.EncodeNil()
	} else {
		yy2arr2 := z.EncBasicHandle().StructToArray
		_ = yy2arr2
		const yyr2 bool = false // struct tag has 'toArray'
		if yyr2 || yy2arr2 {
			z.EncWriteArrayStart(7)
			z.EncWriteArrayElem()
			if z.EncBasicHandle().TimeBuiltin() {
				r.EncodeTime(x.CreatedAt)
			} else if yyxt10 := z.Extension(x.CreatedAt); yyxt10 != nil {
				z.EncExtension(x.CreatedAt, yyxt10)
			} else if z.EncBinary() {
				z.EncBinaryMarshal(x.CreatedAt)
			} else if !z.EncBinary() && z.IsJSONHandle() {
				z.EncJSONMarshal(x.CreatedAt)
			} else {
				z.EncFallback(x.CreatedAt)
			}
			z.EncWriteArrayElem()
			if z.EncBasicHandle().TimeBuiltin() {
				r.EncodeTime(x.UpdatedAt)
			} else if yyxt11 := z.Extension(x.UpdatedAt); yyxt11 != nil {
				z.EncExtension(x.UpdatedAt, yyxt11)
			} else if z.EncBinary() {
				z.EncBinaryMarshal(x.UpdatedAt)
			} else if !z.EncBinary() && z.IsJSONHandle() {
				z.EncJSONMarshal(x.UpdatedAt)
			} else {
				z.EncFallback(x.UpdatedAt)
			}
			z.EncWriteArrayElem()
			yy12 := &x.ID
			if yyxt13 := z.Extension(yy12); yyxt13 != nil {
				z.EncExtension(yy12, yyxt13)
			} else if !z.EncBinary() && z.IsJSONHandle() {
				z.EncJSONMarshal(*yy12)
			} else {
				z.F.EncSliceUint8V(([]uint8)(yy12[:]), e)
			}
			z.EncWriteArrayElem()
			yy14 := &x.Address
			h.encArray20uint8((*[20]uint8)(yy14), e)
			z.EncWriteArrayElem()
			r.EncodeString(string(x.Email))
			z.EncWriteArrayElem()
			r.EncodeBool(bool(x.EmailVerified))
			z.EncWriteArrayElem()
			yy18 := &x.EmailVerificationToken
			h.encArray32uint8((*[32]uint8)(yy18), e)
			z.EncWriteArrayEnd()
		} else {
			z.EncWriteMapStart(7)
			if z.EncBasicHandle().Canonical {
				z.EncWriteMapElemKey()
				r.EncodeString(`addr`)
				z.EncWriteMapElemValue()
				yy20 := &x.Address
				h.encArray20uint8((*[20]uint8)(yy20), e)
				z.EncWriteMapElemKey()
				r.EncodeString(`created_at`)
				z.EncWriteMapElemValue()
				if z.EncBasicHandle().TimeBuiltin() {
					r.EncodeTime(x.CreatedAt)
				} else if yyxt22 := z.Extension(x.CreatedAt); yyxt22 != nil {
					z.EncExtension(x.CreatedAt, yyxt22)
				} else if z.EncBinary() {
					z.EncBinaryMarshal(x.CreatedAt)
				} else if !z.EncBinary() && z.IsJSONHandle() {
					z.EncJSONMarshal(x.CreatedAt)
				} else {
					z.EncFallback(x.CreatedAt)
				}
				z.EncWriteMapElemKey()
				r.EncodeString(`email`)
				z.EncWriteMapElemValue()
				r.EncodeString(string(x.Email))
				z.EncWriteMapElemKey()
				r.EncodeString(`email_verification_token`)
				z.EncWriteMapElemValue()
				yy24 := &x.EmailVerificationToken
				h.encArray32uint8((*[32]uint8)(yy24), e)
				z.EncWriteMapElemKey()
				r.EncodeString(`email_verified`)
				z.EncWriteMapElemValue()
				r.EncodeBool(bool(x.EmailVerified))
				z.EncWriteMapElemKey()
				r.EncodeString(`id`)
				z.EncWriteMapElemValue()
				yy27 := &x.ID
				if yyxt28 := z.Extension(yy27); yyxt28 != nil {
					z.EncExtension(yy27, yyxt28)
				} else if !z.EncBinary() && z.IsJSONHandle() {
					z.EncJSONMarshal(*yy27)
				} else {
					z.F.EncSliceUint8V(([]uint8)(yy27[:]), e)
				}
				z.EncWriteMapElemKey()
				r.EncodeString(`updated_at`)
				z.EncWriteMapElemValue()
				if z.EncBasicHandle().TimeBuiltin() {
					r.EncodeTime(x.UpdatedAt)
				} else if yyxt29 := z.Extension(x.UpdatedAt); yyxt29 != nil {
					z.EncExtension(x.UpdatedAt, yyxt29)
				} else if z.EncBinary() {
					z.EncBinaryMarshal(x.UpdatedAt)
				} else if !z.EncBinary() && z.IsJSONHandle() {
					z.EncJSONMarshal(x.UpdatedAt)
				} else {
					z.EncFallback(x.UpdatedAt)
				}
			} else {
				z.EncWriteMapElemKey()
				r.EncodeString(`created_at`)
				z.EncWriteMapElemValue()
				if z.EncBasicHandle().TimeBuiltin() {
					r.EncodeTime(x.CreatedAt)
				} else if yyxt30 := z.Extension(x.CreatedAt); yyxt30 != nil {
					z.EncExtension(x.CreatedAt, yyxt30)
				} else if z.EncBinary() {
					z.EncBinaryMarshal(x.CreatedAt)
				} else if !z.EncBinary() && z.IsJSONHandle() {
					z.EncJSONMarshal(x.CreatedAt)
				} else {
					z.EncFallback(x.CreatedAt)
				}
				z.EncWriteMapElemKey()
				r.EncodeString(`updated_at`)
				z.EncWriteMapElemValue()
				if z.EncBasicHandle().TimeBuiltin() {
					r.EncodeTime(x.UpdatedAt)
				} else if yyxt31 := z.Extension(x.UpdatedAt); yyxt31 != nil {
					z.EncExtension(x.UpdatedAt, yyxt31)
				} else if z.EncBinary() {
					z.EncBinaryMarshal(x.UpdatedAt)
				} else if !z.EncBinary() && z.IsJSONHandle() {
					z.EncJSONMarshal(x.UpdatedAt)
				} else {
					z.EncFallback(x.UpdatedAt)
				}
				z.EncWriteMapElemKey()
				r.EncodeString(`id`)
				z.EncWriteMapElemValue()
				yy32 := &x.ID
				if yyxt33 := z.Extension(yy32); yyxt33 != nil {
					z.EncExtension(yy32, yyxt33)
				} else if !z.EncBinary() && z.IsJSONHandle() {
					z.EncJSONMarshal(*yy32)
				} else {
					z.F.EncSliceUint8V(([]uint8)(yy32[:]), e)
				}
				z.EncWriteMapElemKey()
				r.EncodeString(`addr`)
				z.EncWriteMapElemValue()
				yy34 := &x.Address
				h.encArray20uint8((*[20]uint8)(yy34), e)
				z.EncWriteMapElemKey()
				r.EncodeString(`email`)
				z.EncWriteMapElemValue()
				r.EncodeString(string(x.Email))
				z.EncWriteMapElemKey()
				r.EncodeString(`email_verified`)
				z.EncWriteMapElemValue()
				r.EncodeBool(bool(x.EmailVerified))
				z.EncWriteMapElemKey()
				r.EncodeString(`email_verification_token`)
				z.EncWriteMapElemValue()
				yy38 := &x.EmailVerificationToken
				h.encArray32uint8((*[32]uint8)(yy38), e)
			}
			z.EncWriteMapEnd()
		}
	}
}

func (x *User) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer42
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	yyct2 := r.ContainerType()
	if yyct2 == codecSelferValueTypeNil42 {
		*(x) = User{}
	} else if yyct2 == codecSelferValueTypeMap42 {
		yyl2 := z.DecReadMapStart()
		if yyl2 == 0 {
		} else {
			x.codecDecodeSelfFromMap(yyl2, d)
		}
		z.DecReadMapEnd()
	} else if yyct2 == codecSelferValueTypeArray42 {
		yyl2 := z.DecReadArrayStart()
		if yyl2 != 0 {
			x.codecDecodeSelfFromArray(yyl2, d)
		}
		z.DecReadArrayEnd()
	} else {
		panic(errCodecSelferOnlyMapOrArrayEncodeToStruct42)
	}
}

func (x *User) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer42
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if z.DecCheckBreak() {
				break
			}
		}
		z.DecReadMapElemKey()
		yys3 := r.DecodeStringAsBytes()
		z.DecReadMapElemValue()
		switch string(yys3) {
		case "created_at":
			if z.DecBasicHandle().TimeBuiltin() {
				x.CreatedAt = r.DecodeTime()
			} else if yyxt5 := z.Extension(x.CreatedAt); yyxt5 != nil {
				z.DecExtension(&x.CreatedAt, yyxt5)
			} else if z.DecBinary() {
				z.DecBinaryUnmarshal(&x.CreatedAt)
			} else if !z.DecBinary() && z.IsJSONHandle() {
				z.DecJSONUnmarshal(&x.CreatedAt)
			} else {
				z.DecFallback(&x.CreatedAt, false)
			}
		case "updated_at":
			if z.DecBasicHandle().TimeBuiltin() {
				x.UpdatedAt = r.DecodeTime()
			} else if yyxt7 := z.Extension(x.UpdatedAt); yyxt7 != nil {
				z.DecExtension(&x.UpdatedAt, yyxt7)
			} else if z.DecBinary() {
				z.DecBinaryUnmarshal(&x.UpdatedAt)
			} else if !z.DecBinary() && z.IsJSONHandle() {
				z.DecJSONUnmarshal(&x.UpdatedAt)
			} else {
				z.DecFallback(&x.UpdatedAt, false)
			}
		case "id":
			if yyxt9 := z.Extension(x.ID); yyxt9 != nil {
				z.DecExtension(&x.ID, yyxt9)
			} else if !z.DecBinary() && z.IsJSONHandle() {
				z.DecJSONUnmarshal(&x.ID)
			} else {
				z.F.DecSliceUint8N(([]uint8)(x.ID[:]), d)
			}
		case "addr":
			h.decArray20uint8((*[20]uint8)(&x.Address), d)
		case "email":
			x.Email = (string)(z.DecStringZC(r.DecodeStringAsBytes()))
		case "email_verified":
			x.EmailVerified = (bool)(r.DecodeBool())
		case "email_verification_token":
			h.decArray32uint8((*[32]uint8)(&x.EmailVerificationToken), d)
		default:
			z.DecStructFieldNotFound(-1, string(yys3))
		} // end switch yys3
	} // end for yyj3
}

func (x *User) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer42
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	var yyj16 int
	var yyb16 bool
	var yyhl16 bool = l >= 0
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = z.DecCheckBreak()
	}
	if yyb16 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if z.DecBasicHandle().TimeBuiltin() {
		x.CreatedAt = r.DecodeTime()
	} else if yyxt18 := z.Extension(x.CreatedAt); yyxt18 != nil {
		z.DecExtension(&x.CreatedAt, yyxt18)
	} else if z.DecBinary() {
		z.DecBinaryUnmarshal(&x.CreatedAt)
	} else if !z.DecBinary() && z.IsJSONHandle() {
		z.DecJSONUnmarshal(&x.CreatedAt)
	} else {
		z.DecFallback(&x.CreatedAt, false)
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = z.DecCheckBreak()
	}
	if yyb16 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if z.DecBasicHandle().TimeBuiltin() {
		x.UpdatedAt = r.DecodeTime()
	} else if yyxt20 := z.Extension(x.UpdatedAt); yyxt20 != nil {
		z.DecExtension(&x.UpdatedAt, yyxt20)
	} else if z.DecBinary() {
		z.DecBinaryUnmarshal(&x.UpdatedAt)
	} else if !z.DecBinary() && z.IsJSONHandle() {
		z.DecJSONUnmarshal(&x.UpdatedAt)
	} else {
		z.DecFallback(&x.UpdatedAt, false)
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = z.DecCheckBreak()
	}
	if yyb16 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if yyxt22 := z.Extension(x.ID); yyxt22 != nil {
		z.DecExtension(&x.ID, yyxt22)
	} else if !z.DecBinary() && z.IsJSONHandle() {
		z.DecJSONUnmarshal(&x.ID)
	} else {
		z.F.DecSliceUint8N(([]uint8)(x.ID[:]), d)
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = z.DecCheckBreak()
	}
	if yyb16 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	h.decArray20uint8((*[20]uint8)(&x.Address), d)
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = z.DecCheckBreak()
	}
	if yyb16 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.Email = (string)(z.DecStringZC(r.DecodeStringAsBytes()))
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = z.DecCheckBreak()
	}
	if yyb16 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.EmailVerified = (bool)(r.DecodeBool())
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = z.DecCheckBreak()
	}
	if yyb16 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	h.decArray32uint8((*[32]uint8)(&x.EmailVerificationToken), d)
	for {
		yyj16++
		if yyhl16 {
			yyb16 = yyj16 > l
		} else {
			yyb16 = z.DecCheckBreak()
		}
		if yyb16 {
			break
		}
		z.DecReadArrayElem()
		z.DecStructFieldNotFound(yyj16-1, "")
	}
}

func (x *User) IsCodecEmpty() bool {
	return !(!(x.CreatedAt.IsZero()) || !(x.UpdatedAt.IsZero()) || x.ID != pkg1_primitive.ObjectID{} || x.Address != [20]uint8{} || x.Email != "" || bool(x.EmailVerified) || x.EmailVerificationToken != [32]uint8{} || false)
}

func (Feed) codecSelferViaCodecgen() {}
func (x *Feed) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer42
	z, r := codec1978.GenHelper().Encoder(e)
	_, _, _ = h, z, r
	if z.EncBasicHandle().CheckCircularRef {
		z.EncEncode(x)
		return
	}
	if x == nil {
		r.EncodeNil()
	} else {
		yy2arr2 := z.EncBasicHandle().StructToArray
		_ = yy2arr2
		const yyr2 bool = false // struct tag has 'toArray'
		if yyr2 || yy2arr2 {
			z.EncWriteArrayStart(7)
			z.EncWriteArrayElem()
			if z.EncBasicHandle().TimeBuiltin() {
				r.EncodeTime(x.CreatedAt)
			} else if yyxt10 := z.Extension(x.CreatedAt); yyxt10 != nil {
				z.EncExtension(x.CreatedAt, yyxt10)
			} else if z.EncBinary() {
				z.EncBinaryMarshal(x.CreatedAt)
			} else if !z.EncBinary() && z.IsJSONHandle() {
				z.EncJSONMarshal(x.CreatedAt)
			} else {
				z.EncFallback(x.CreatedAt)
			}
			z.EncWriteArrayElem()
			if z.EncBasicHandle().TimeBuiltin() {
				r.EncodeTime(x.UpdatedAt)
			} else if yyxt11 := z.Extension(x.UpdatedAt); yyxt11 != nil {
				z.EncExtension(x.UpdatedAt, yyxt11)
			} else if z.EncBinary() {
				z.EncBinaryMarshal(x.UpdatedAt)
			} else if !z.EncBinary() && z.IsJSONHandle() {
				z.EncJSONMarshal(x.UpdatedAt)
			} else {
				z.EncFallback(x.UpdatedAt)
			}
			z.EncWriteArrayElem()
			yy12 := &x.ID
			if yyxt13 := z.Extension(yy12); yyxt13 != nil {
				z.EncExtension(yy12, yyxt13)
			} else if !z.EncBinary() && z.IsJSONHandle() {
				z.EncJSONMarshal(*yy12)
			} else {
				z.F.EncSliceUint8V(([]uint8)(yy12[:]), e)
			}
			z.EncWriteArrayElem()
			yy14 := &x.Owner
			if yyxt15 := z.Extension(yy14); yyxt15 != nil {
				z.EncExtension(yy14, yyxt15)
			} else if !z.EncBinary() && z.IsJSONHandle() {
				z.EncJSONMarshal(*yy14)
			} else {
				z.F.EncSliceUint8V(([]uint8)(yy14[:]), e)
			}
			z.EncWriteArrayElem()
			r.EncodeString(string(x.URL))
			z.EncWriteArrayElem()
			if yyxt17 := z.Extension(x.Frequency); yyxt17 != nil {
				z.EncExtension(x.Frequency, yyxt17)
			} else {
				r.EncodeInt(int64(x.Frequency))
			}
			z.EncWriteArrayElem()
			if z.EncBasicHandle().TimeBuiltin() {
				r.EncodeTime(x.LastFetched)
			} else if yyxt18 := z.Extension(x.LastFetched); yyxt18 != nil {
				z.EncExtension(x.LastFetched, yyxt18)
			} else if z.EncBinary() {
				z.EncBinaryMarshal(x.LastFetched)
			} else if !z.EncBinary() && z.IsJSONHandle() {
				z.EncJSONMarshal(x.LastFetched)
			} else {
				z.EncFallback(x.LastFetched)
			}
			z.EncWriteArrayEnd()
		} else {
			z.EncWriteMapStart(7)
			if z.EncBasicHandle().Canonical {
				z.EncWriteMapElemKey()
				r.EncodeString(`created_at`)
				z.EncWriteMapElemValue()
				if z.EncBasicHandle().TimeBuiltin() {
					r.EncodeTime(x.CreatedAt)
				} else if yyxt19 := z.Extension(x.CreatedAt); yyxt19 != nil {
					z.EncExtension(x.CreatedAt, yyxt19)
				} else if z.EncBinary() {
					z.EncBinaryMarshal(x.CreatedAt)
				} else if !z.EncBinary() && z.IsJSONHandle() {
					z.EncJSONMarshal(x.CreatedAt)
				} else {
					z.EncFallback(x.CreatedAt)
				}
				z.EncWriteMapElemKey()
				r.EncodeString(`feed_url`)
				z.EncWriteMapElemValue()
				r.EncodeString(string(x.URL))
				z.EncWriteMapElemKey()
				r.EncodeString(`frequency`)
				z.EncWriteMapElemValue()
				if yyxt21 := z.Extension(x.Frequency); yyxt21 != nil {
					z.EncExtension(x.Frequency, yyxt21)
				} else {
					r.EncodeInt(int64(x.Frequency))
				}
				z.EncWriteMapElemKey()
				r.EncodeString(`id`)
				z.EncWriteMapElemValue()
				yy22 := &x.ID
				if yyxt23 := z.Extension(yy22); yyxt23 != nil {
					z.EncExtension(yy22, yyxt23)
				} else if !z.EncBinary() && z.IsJSONHandle() {
					z.EncJSONMarshal(*yy22)
				} else {
					z.F.EncSliceUint8V(([]uint8)(yy22[:]), e)
				}
				z.EncWriteMapElemKey()
				r.EncodeString(`last_fetched`)
				z.EncWriteMapElemValue()
				if z.EncBasicHandle().TimeBuiltin() {
					r.EncodeTime(x.LastFetched)
				} else if yyxt24 := z.Extension(x.LastFetched); yyxt24 != nil {
					z.EncExtension(x.LastFetched, yyxt24)
				} else if z.EncBinary() {
					z.EncBinaryMarshal(x.LastFetched)
				} else if !z.EncBinary() && z.IsJSONHandle() {
					z.EncJSONMarshal(x.LastFetched)
				} else {
					z.EncFallback(x.LastFetched)
				}
				z.EncWriteMapElemKey()
				r.EncodeString(`owner_id`)
				z.EncWriteMapElemValue()
				yy25 := &x.Owner
				if yyxt26 := z.Extension(yy25); yyxt26 != nil {
					z.EncExtension(yy25, yyxt26)
				} else if !z.EncBinary() && z.IsJSONHandle() {
					z.EncJSONMarshal(*yy25)
				} else {
					z.F.EncSliceUint8V(([]uint8)(yy25[:]), e)
				}
				z.EncWriteMapElemKey()
				r.EncodeString(`updated_at`)
				z.EncWriteMapElemValue()
				if z.EncBasicHandle().TimeBuiltin() {
					r.EncodeTime(x.UpdatedAt)
				} else if yyxt27 := z.Extension(x.UpdatedAt); yyxt27 != nil {
					z.EncExtension(x.UpdatedAt, yyxt27)
				} else if z.EncBinary() {
					z.EncBinaryMarshal(x.UpdatedAt)
				} else if !z.EncBinary() && z.IsJSONHandle() {
					z.EncJSONMarshal(x.UpdatedAt)
				} else {
					z.EncFallback(x.UpdatedAt)
				}
			} else {
				z.EncWriteMapElemKey()
				r.EncodeString(`created_at`)
				z.EncWriteMapElemValue()
				if z.EncBasicHandle().TimeBuiltin() {
					r.EncodeTime(x.CreatedAt)
				} else if yyxt28 := z.Extension(x.CreatedAt); yyxt28 != nil {
					z.EncExtension(x.CreatedAt, yyxt28)
				} else if z.EncBinary() {
					z.EncBinaryMarshal(x.CreatedAt)
				} else if !z.EncBinary() && z.IsJSONHandle() {
					z.EncJSONMarshal(x.CreatedAt)
				} else {
					z.EncFallback(x.CreatedAt)
				}
				z.EncWriteMapElemKey()
				r.EncodeString(`updated_at`)
				z.EncWriteMapElemValue()
				if z.EncBasicHandle().TimeBuiltin() {
					r.EncodeTime(x.UpdatedAt)
				} else if yyxt29 := z.Extension(x.UpdatedAt); yyxt29 != nil {
					z.EncExtension(x.UpdatedAt, yyxt29)
				} else if z.EncBinary() {
					z.EncBinaryMarshal(x.UpdatedAt)
				} else if !z.EncBinary() && z.IsJSONHandle() {
					z.EncJSONMarshal(x.UpdatedAt)
				} else {
					z.EncFallback(x.UpdatedAt)
				}
				z.EncWriteMapElemKey()
				r.EncodeString(`id`)
				z.EncWriteMapElemValue()
				yy30 := &x.ID
				if yyxt31 := z.Extension(yy30); yyxt31 != nil {
					z.EncExtension(yy30, yyxt31)
				} else if !z.EncBinary() && z.IsJSONHandle() {
					z.EncJSONMarshal(*yy30)
				} else {
					z.F.EncSliceUint8V(([]uint8)(yy30[:]), e)
				}
				z.EncWriteMapElemKey()
				r.EncodeString(`owner_id`)
				z.EncWriteMapElemValue()
				yy32 := &x.Owner
				if yyxt33 := z.Extension(yy32); yyxt33 != nil {
					z.EncExtension(yy32, yyxt33)
				} else if !z.EncBinary() && z.IsJSONHandle() {
					z.EncJSONMarshal(*yy32)
				} else {
					z.F.EncSliceUint8V(([]uint8)(yy32[:]), e)
				}
				z.EncWriteMapElemKey()
				r.EncodeString(`feed_url`)
				z.EncWriteMapElemValue()
				r.EncodeString(string(x.URL))
				z.EncWriteMapElemKey()
				r.EncodeString(`frequency`)
				z.EncWriteMapElemValue()
				if yyxt35 := z.Extension(x.Frequency); yyxt35 != nil {
					z.EncExtension(x.Frequency, yyxt35)
				} else {
					r.EncodeInt(int64(x.Frequency))
				}
				z.EncWriteMapElemKey()
				r.EncodeString(`last_fetched`)
				z.EncWriteMapElemValue()
				if z.EncBasicHandle().TimeBuiltin() {
					r.EncodeTime(x.LastFetched)
				} else if yyxt36 := z.Extension(x.LastFetched); yyxt36 != nil {
					z.EncExtension(x.LastFetched, yyxt36)
				} else if z.EncBinary() {
					z.EncBinaryMarshal(x.LastFetched)
				} else if !z.EncBinary() && z.IsJSONHandle() {
					z.EncJSONMarshal(x.LastFetched)
				} else {
					z.EncFallback(x.LastFetched)
				}
			}
			z.EncWriteMapEnd()
		}
	}
}

func (x *Feed) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer42
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	yyct2 := r.ContainerType()
	if yyct2 == codecSelferValueTypeNil42 {
		*(x) = Feed{}
	} else if yyct2 == codecSelferValueTypeMap42 {
		yyl2 := z.DecReadMapStart()
		if yyl2 == 0 {
		} else {
			x.codecDecodeSelfFromMap(yyl2, d)
		}
		z.DecReadMapEnd()
	} else if yyct2 == codecSelferValueTypeArray42 {
		yyl2 := z.DecReadArrayStart()
		if yyl2 != 0 {
			x.codecDecodeSelfFromArray(yyl2, d)
		}
		z.DecReadArrayEnd()
	} else {
		panic(errCodecSelferOnlyMapOrArrayEncodeToStruct42)
	}
}

func (x *Feed) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer42
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if z.DecCheckBreak() {
				break
			}
		}
		z.DecReadMapElemKey()
		yys3 := r.DecodeStringAsBytes()
		z.DecReadMapElemValue()
		switch string(yys3) {
		case "created_at":
			if z.DecBasicHandle().TimeBuiltin() {
				x.CreatedAt = r.DecodeTime()
			} else if yyxt5 := z.Extension(x.CreatedAt); yyxt5 != nil {
				z.DecExtension(&x.CreatedAt, yyxt5)
			} else if z.DecBinary() {
				z.DecBinaryUnmarshal(&x.CreatedAt)
			} else if !z.DecBinary() && z.IsJSONHandle() {
				z.DecJSONUnmarshal(&x.CreatedAt)
			} else {
				z.DecFallback(&x.CreatedAt, false)
			}
		case "updated_at":
			if z.DecBasicHandle().TimeBuiltin() {
				x.UpdatedAt = r.DecodeTime()
			} else if yyxt7 := z.Extension(x.UpdatedAt); yyxt7 != nil {
				z.DecExtension(&x.UpdatedAt, yyxt7)
			} else if z.DecBinary() {
				z.DecBinaryUnmarshal(&x.UpdatedAt)
			} else if !z.DecBinary() && z.IsJSONHandle() {
				z.DecJSONUnmarshal(&x.UpdatedAt)
			} else {
				z.DecFallback(&x.UpdatedAt, false)
			}
		case "id":
			if yyxt9 := z.Extension(x.ID); yyxt9 != nil {
				z.DecExtension(&x.ID, yyxt9)
			} else if !z.DecBinary() && z.IsJSONHandle() {
				z.DecJSONUnmarshal(&x.ID)
			} else {
				z.F.DecSliceUint8N(([]uint8)(x.ID[:]), d)
			}
		case "owner_id":
			if yyxt11 := z.Extension(x.Owner); yyxt11 != nil {
				z.DecExtension(&x.Owner, yyxt11)
			} else if !z.DecBinary() && z.IsJSONHandle() {
				z.DecJSONUnmarshal(&x.Owner)
			} else {
				z.F.DecSliceUint8N(([]uint8)(x.Owner[:]), d)
			}
		case "feed_url":
			x.URL = (string)(z.DecStringZC(r.DecodeStringAsBytes()))
		case "frequency":
			if yyxt14 := z.Extension(x.Frequency); yyxt14 != nil {
				z.DecExtension(&x.Frequency, yyxt14)
			} else {
				x.Frequency = (time.Duration)(r.DecodeInt64())
			}
		case "last_fetched":
			if z.DecBasicHandle().TimeBuiltin() {
				x.LastFetched = r.DecodeTime()
			} else if yyxt16 := z.Extension(x.LastFetched); yyxt16 != nil {
				z.DecExtension(&x.LastFetched, yyxt16)
			} else if z.DecBinary() {
				z.DecBinaryUnmarshal(&x.LastFetched)
			} else if !z.DecBinary() && z.IsJSONHandle() {
				z.DecJSONUnmarshal(&x.LastFetched)
			} else {
				z.DecFallback(&x.LastFetched, false)
			}
		default:
			z.DecStructFieldNotFound(-1, string(yys3))
		} // end switch yys3
	} // end for yyj3
}

func (x *Feed) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer42
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	var yyj17 int
	var yyb17 bool
	var yyhl17 bool = l >= 0
	yyj17++
	if yyhl17 {
		yyb17 = yyj17 > l
	} else {
		yyb17 = z.DecCheckBreak()
	}
	if yyb17 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if z.DecBasicHandle().TimeBuiltin() {
		x.CreatedAt = r.DecodeTime()
	} else if yyxt19 := z.Extension(x.CreatedAt); yyxt19 != nil {
		z.DecExtension(&x.CreatedAt, yyxt19)
	} else if z.DecBinary() {
		z.DecBinaryUnmarshal(&x.CreatedAt)
	} else if !z.DecBinary() && z.IsJSONHandle() {
		z.DecJSONUnmarshal(&x.CreatedAt)
	} else {
		z.DecFallback(&x.CreatedAt, false)
	}
	yyj17++
	if yyhl17 {
		yyb17 = yyj17 > l
	} else {
		yyb17 = z.DecCheckBreak()
	}
	if yyb17 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if z.DecBasicHandle().TimeBuiltin() {
		x.UpdatedAt = r.DecodeTime()
	} else if yyxt21 := z.Extension(x.UpdatedAt); yyxt21 != nil {
		z.DecExtension(&x.UpdatedAt, yyxt21)
	} else if z.DecBinary() {
		z.DecBinaryUnmarshal(&x.UpdatedAt)
	} else if !z.DecBinary() && z.IsJSONHandle() {
		z.DecJSONUnmarshal(&x.UpdatedAt)
	} else {
		z.DecFallback(&x.UpdatedAt, false)
	}
	yyj17++
	if yyhl17 {
		yyb17 = yyj17 > l
	} else {
		yyb17 = z.DecCheckBreak()
	}
	if yyb17 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if yyxt23 := z.Extension(x.ID); yyxt23 != nil {
		z.DecExtension(&x.ID, yyxt23)
	} else if !z.DecBinary() && z.IsJSONHandle() {
		z.DecJSONUnmarshal(&x.ID)
	} else {
		z.F.DecSliceUint8N(([]uint8)(x.ID[:]), d)
	}
	yyj17++
	if yyhl17 {
		yyb17 = yyj17 > l
	} else {
		yyb17 = z.DecCheckBreak()
	}
	if yyb17 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if yyxt25 := z.Extension(x.Owner); yyxt25 != nil {
		z.DecExtension(&x.Owner, yyxt25)
	} else if !z.DecBinary() && z.IsJSONHandle() {
		z.DecJSONUnmarshal(&x.Owner)
	} else {
		z.F.DecSliceUint8N(([]uint8)(x.Owner[:]), d)
	}
	yyj17++
	if yyhl17 {
		yyb17 = yyj17 > l
	} else {
		yyb17 = z.DecCheckBreak()
	}
	if yyb17 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.URL = (string)(z.DecStringZC(r.DecodeStringAsBytes()))
	yyj17++
	if yyhl17 {
		yyb17 = yyj17 > l
	} else {
		yyb17 = z.DecCheckBreak()
	}
	if yyb17 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if yyxt28 := z.Extension(x.Frequency); yyxt28 != nil {
		z.DecExtension(&x.Frequency, yyxt28)
	} else {
		x.Frequency = (time.Duration)(r.DecodeInt64())
	}
	yyj17++
	if yyhl17 {
		yyb17 = yyj17 > l
	} else {
		yyb17 = z.DecCheckBreak()
	}
	if yyb17 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if z.DecBasicHandle().TimeBuiltin() {
		x.LastFetched = r.DecodeTime()
	} else if yyxt30 := z.Extension(x.LastFetched); yyxt30 != nil {
		z.DecExtension(&x.LastFetched, yyxt30)
	} else if z.DecBinary() {
		z.DecBinaryUnmarshal(&x.LastFetched)
	} else if !z.DecBinary() && z.IsJSONHandle() {
		z.DecJSONUnmarshal(&x.LastFetched)
	} else {
		z.DecFallback(&x.LastFetched, false)
	}
	for {
		yyj17++
		if yyhl17 {
			yyb17 = yyj17 > l
		} else {
			yyb17 = z.DecCheckBreak()
		}
		if yyb17 {
			break
		}
		z.DecReadArrayElem()
		z.DecStructFieldNotFound(yyj17-1, "")
	}
}

func (x *Feed) IsCodecEmpty() bool {
	return !(!(x.CreatedAt.IsZero()) || !(x.UpdatedAt.IsZero()) || x.ID != pkg1_primitive.ObjectID{} || x.Owner != pkg1_primitive.ObjectID{} || x.URL != "" || x.Frequency != 0 || !(x.LastFetched.IsZero()) || false)
}

func (SeenItem) codecSelferViaCodecgen() {}
func (x *SeenItem) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer42
	z, r := codec1978.GenHelper().Encoder(e)
	_, _, _ = h, z, r
	if z.EncBasicHandle().CheckCircularRef {
		z.EncEncode(x)
		return
	}
	if x == nil {
		r.EncodeNil()
	} else {
		yy2arr2 := z.EncBasicHandle().StructToArray
		_ = yy2arr2
		const yyr2 bool = false // struct tag has 'toArray'
		if yyr2 || yy2arr2 {
			z.EncWriteArrayStart(4)
			z.EncWriteArrayElem()
			yy7 := &x.ID
			if yyxt8 := z.Extension(yy7); yyxt8 != nil {
				z.EncExtension(yy7, yyxt8)
			} else if !z.EncBinary() && z.IsJSONHandle() {
				z.EncJSONMarshal(*yy7)
			} else {
				z.F.EncSliceUint8V(([]uint8)(yy7[:]), e)
			}
			z.EncWriteArrayElem()
			yy9 := &x.FeedID
			if yyxt10 := z.Extension(yy9); yyxt10 != nil {
				z.EncExtension(yy9, yyxt10)
			} else if !z.EncBinary() && z.IsJSONHandle() {
				z.EncJSONMarshal(*yy9)
			} else {
				z.F.EncSliceUint8V(([]uint8)(yy9[:]), e)
			}
			z.EncWriteArrayElem()
			r.EncodeString(string(x.GUID))
			z.EncWriteArrayElem()
			if z.EncBasicHandle().TimeBuiltin() {
				r.EncodeTime(x.Timestamp)
			} else if yyxt12 := z.Extension(x.Timestamp); yyxt12 != nil {
				z.EncExtension(x.Timestamp, yyxt12)
			} else if z.EncBinary() {
				z.EncBinaryMarshal(x.Timestamp)
			} else if !z.EncBinary() && z.IsJSONHandle() {
				z.EncJSONMarshal(x.Timestamp)
			} else {
				z.EncFallback(x.Timestamp)
			}
			z.EncWriteArrayEnd()
		} else {
			z.EncWriteMapStart(4)
			if z.EncBasicHandle().Canonical {
				z.EncWriteMapElemKey()
				r.EncodeString(`feed_id`)
				z.EncWriteMapElemValue()
				yy13 := &x.FeedID
				if yyxt14 := z.Extension(yy13); yyxt14 != nil {
					z.EncExtension(yy13, yyxt14)
				} else if !z.EncBinary() && z.IsJSONHandle() {
					z.EncJSONMarshal(*yy13)
				} else {
					z.F.EncSliceUint8V(([]uint8)(yy13[:]), e)
				}
				z.EncWriteMapElemKey()
				r.EncodeString(`guid`)
				z.EncWriteMapElemValue()
				r.EncodeString(string(x.GUID))
				z.EncWriteMapElemKey()
				r.EncodeString(`id`)
				z.EncWriteMapElemValue()
				yy16 := &x.ID
				if yyxt17 := z.Extension(yy16); yyxt17 != nil {
					z.EncExtension(yy16, yyxt17)
				} else if !z.EncBinary() && z.IsJSONHandle() {
					z.EncJSONMarshal(*yy16)
				} else {
					z.F.EncSliceUint8V(([]uint8)(yy16[:]), e)
				}
				z.EncWriteMapElemKey()
				r.EncodeString(`timestamp`)
				z.EncWriteMapElemValue()
				if z.EncBasicHandle().TimeBuiltin() {
					r.EncodeTime(x.Timestamp)
				} else if yyxt18 := z.Extension(x.Timestamp); yyxt18 != nil {
					z.EncExtension(x.Timestamp, yyxt18)
				} else if z.EncBinary() {
					z.EncBinaryMarshal(x.Timestamp)
				} else if !z.EncBinary() && z.IsJSONHandle() {
					z.EncJSONMarshal(x.Timestamp)
				} else {
					z.EncFallback(x.Timestamp)
				}
			} else {
				z.EncWriteMapElemKey()
				r.EncodeString(`id`)
				z.EncWriteMapElemValue()
				yy19 := &x.ID
				if yyxt20 := z.Extension(yy19); yyxt20 != nil {
					z.EncExtension(yy19, yyxt20)
				} else if !z.EncBinary() && z.IsJSONHandle() {
					z.EncJSONMarshal(*yy19)
				} else {
					z.F.EncSliceUint8V(([]uint8)(yy19[:]), e)
				}
				z.EncWriteMapElemKey()
				r.EncodeString(`feed_id`)
				z.EncWriteMapElemValue()
				yy21 := &x.FeedID
				if yyxt22 := z.Extension(yy21); yyxt22 != nil {
					z.EncExtension(yy21, yyxt22)
				} else if !z.EncBinary() && z.IsJSONHandle() {
					z.EncJSONMarshal(*yy21)
				} else {
					z.F.EncSliceUint8V(([]uint8)(yy21[:]), e)
				}
				z.EncWriteMapElemKey()
				r.EncodeString(`guid`)
				z.EncWriteMapElemValue()
				r.EncodeString(string(x.GUID))
				z.EncWriteMapElemKey()
				r.EncodeString(`timestamp`)
				z.EncWriteMapElemValue()
				if z.EncBasicHandle().TimeBuiltin() {
					r.EncodeTime(x.Timestamp)
				} else if yyxt24 := z.Extension(x.Timestamp); yyxt24 != nil {
					z.EncExtension(x.Timestamp, yyxt24)
				} else if z.EncBinary() {
					z.EncBinaryMarshal(x.Timestamp)
				} else if !z.EncBinary() && z.IsJSONHandle() {
					z.EncJSONMarshal(x.Timestamp)
				} else {
					z.EncFallback(x.Timestamp)
				}
			}
			z.EncWriteMapEnd()
		}
	}
}

func (x *SeenItem) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer42
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	yyct2 := r.ContainerType()
	if yyct2 == codecSelferValueTypeNil42 {
		*(x) = SeenItem{}
	} else if yyct2 == codecSelferValueTypeMap42 {
		yyl2 := z.DecReadMapStart()
		if yyl2 == 0 {
		} else {
			x.codecDecodeSelfFromMap(yyl2, d)
		}
		z.DecReadMapEnd()
	} else if yyct2 == codecSelferValueTypeArray42 {
		yyl2 := z.DecReadArrayStart()
		if yyl2 != 0 {
			x.codecDecodeSelfFromArray(yyl2, d)
		}
		z.DecReadArrayEnd()
	} else {
		panic(errCodecSelferOnlyMapOrArrayEncodeToStruct42)
	}
}

func (x *SeenItem) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer42
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if z.DecCheckBreak() {
				break
			}
		}
		z.DecReadMapElemKey()
		yys3 := r.DecodeStringAsBytes()
		z.DecReadMapElemValue()
		switch string(yys3) {
		case "id":
			if yyxt5 := z.Extension(x.ID); yyxt5 != nil {
				z.DecExtension(&x.ID, yyxt5)
			} else if !z.DecBinary() && z.IsJSONHandle() {
				z.DecJSONUnmarshal(&x.ID)
			} else {
				z.F.DecSliceUint8N(([]uint8)(x.ID[:]), d)
			}
		case "feed_id":
			if yyxt7 := z.Extension(x.FeedID); yyxt7 != nil {
				z.DecExtension(&x.FeedID, yyxt7)
			} else if !z.DecBinary() && z.IsJSONHandle() {
				z.DecJSONUnmarshal(&x.FeedID)
			} else {
				z.F.DecSliceUint8N(([]uint8)(x.FeedID[:]), d)
			}
		case "guid":
			x.GUID = (string)(z.DecStringZC(r.DecodeStringAsBytes()))
		case "timestamp":
			if z.DecBasicHandle().TimeBuiltin() {
				x.Timestamp = r.DecodeTime()
			} else if yyxt10 := z.Extension(x.Timestamp); yyxt10 != nil {
				z.DecExtension(&x.Timestamp, yyxt10)
			} else if z.DecBinary() {
				z.DecBinaryUnmarshal(&x.Timestamp)
			} else if !z.DecBinary() && z.IsJSONHandle() {
				z.DecJSONUnmarshal(&x.Timestamp)
			} else {
				z.DecFallback(&x.Timestamp, false)
			}
		default:
			z.DecStructFieldNotFound(-1, string(yys3))
		} // end switch yys3
	} // end for yyj3
}

func (x *SeenItem) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer42
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	var yyj11 int
	var yyb11 bool
	var yyhl11 bool = l >= 0
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = z.DecCheckBreak()
	}
	if yyb11 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if yyxt13 := z.Extension(x.ID); yyxt13 != nil {
		z.DecExtension(&x.ID, yyxt13)
	} else if !z.DecBinary() && z.IsJSONHandle() {
		z.DecJSONUnmarshal(&x.ID)
	} else {
		z.F.DecSliceUint8N(([]uint8)(x.ID[:]), d)
	}
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = z.DecCheckBreak()
	}
	if yyb11 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if yyxt15 := z.Extension(x.FeedID); yyxt15 != nil {
		z.DecExtension(&x.FeedID, yyxt15)
	} else if !z.DecBinary() && z.IsJSONHandle() {
		z.DecJSONUnmarshal(&x.FeedID)
	} else {
		z.F.DecSliceUint8N(([]uint8)(x.FeedID[:]), d)
	}
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = z.DecCheckBreak()
	}
	if yyb11 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.GUID = (string)(z.DecStringZC(r.DecodeStringAsBytes()))
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = z.DecCheckBreak()
	}
	if yyb11 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if z.DecBasicHandle().TimeBuiltin() {
		x.Timestamp = r.DecodeTime()
	} else if yyxt18 := z.Extension(x.Timestamp); yyxt18 != nil {
		z.DecExtension(&x.Timestamp, yyxt18)
	} else if z.DecBinary() {
		z.DecBinaryUnmarshal(&x.Timestamp)
	} else if !z.DecBinary() && z.IsJSONHandle() {
		z.DecJSONUnmarshal(&x.Timestamp)
	} else {
		z.DecFallback(&x.Timestamp, false)
	}
	for {
		yyj11++
		if yyhl11 {
			yyb11 = yyj11 > l
		} else {
			yyb11 = z.DecCheckBreak()
		}
		if yyb11 {
			break
		}
		z.DecReadArrayElem()
		z.DecStructFieldNotFound(yyj11-1, "")
	}
}

func (x *SeenItem) IsCodecEmpty() bool {
	return !(x.ID != pkg1_primitive.ObjectID{} || x.FeedID != pkg1_primitive.ObjectID{} || x.GUID != "" || !(x.Timestamp.IsZero()) || false)
}

func (x codecSelfer42) encArray20uint8(v *[20]uint8, e *codec1978.Encoder) {
	var h codecSelfer42
	z, r := codec1978.GenHelper().Encoder(e)
	_, _, _ = h, z, r
	if v == nil {
		r.EncodeNil()
		return
	}
	r.EncodeStringBytesRaw(((*[20]byte)(v))[:])
}

func (x codecSelfer42) decArray20uint8(v *[20]uint8, d *codec1978.Decoder) {
	var h codecSelfer42
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	r.DecodeBytes(((*[20]byte)(v))[:])
}

func (x codecSelfer42) encArray32uint8(v *[32]uint8, e *codec1978.Encoder) {
	var h codecSelfer42
	z, r := codec1978.GenHelper().Encoder(e)
	_, _, _ = h, z, r
	if v == nil {
		r.EncodeNil()
		return
	}
	r.EncodeStringBytesRaw(((*[32]byte)(v))[:])
}

func (x codecSelfer42) decArray32uint8(v *[32]uint8, d *codec1978.Decoder) {
	var h codecSelfer42
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	r.DecodeBytes(((*[32]byte)(v))[:])
}
